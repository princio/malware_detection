import math
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output, State
from plotly.subplots import make_subplots
import dash_bootstrap_components as dbc

import psycopg2
import psycopg2.extras
import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go
import os
from sklearn.metrics import classification_report, confusion_matrix
import plotly.figure_factory as ff


db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

# pcap_list = [
#     ["27_2017_04_30-normal.pcap", 858],
#     ["32_2017-05-02_normal.pcap", 859],
#     ["29_2017-05-01_normal.pcap", 872],
#     ["30_2017-05-01_normal.pcap", 873],
#     ["31_2017-05-01_normal.pcap", 874],
#     ["10_2013-08-20_capture-win10.pcap", 80],
#     ["303-1_2017-08-12_capture-win2.pcap", 106],
#     ["5_2013-08-20_capture-win14.pcap", 845],
#     ["7_2013-08-20_capture-win1.pcap", 846],
#     ["10_2013-08-20_capture-win9.pcap", 847],
#     ["25-2_2014-01-25_capture_win3.pcap", 848],
#     ["6_2013-08-20_capture-win6.pcap", 849],
#     ["6_2013-08-20_capture-win11.pcap", 850],
#     ["10_2013-08-20_capture-win7.original.pcap", 851],
#     ["10_2013-08-20_capture-win7.pcap", 852],
#     ["110-6_2015-06-07_capture-win9.pcap", 853],
#     ["69_2014-04-07_capture-win17.pcap", 854],
#     ["71_2014-04-07_capture-win19.fixed.pcap", 855],
#     ["25-6_2014-12-20_capture-win3.pcap", 856],
#     ["170-1_capture-win6.pcap", 857]
# ]

manual_values = {
    "null": ("dark", -5),
    "legit": ("success", 0),
    "malware": ("danger", 1),
    "ad-related": ("warning", 2),
    "undef": ("light", 3),
    "unknown": ("secondary", 4),
    "wrong": ("danger", 5),
}

cur = db.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
cur.execute("SELECT * FROM malware")
malwares = cur.fetchall()


def get_df(mws=None, manuals=None, mw_num="any", top10m=False, rcode3=0, unique2k8k=True):

    clauses = []

    if mws and mws != "any":
        clauses.append("malwares[1]=%d" % mws)

    if top10m and top10m != "any":
        clauses.append("top10m is %s null" % ("not" if top10m else ""))

    if mw_num == "gt1":
        clauses.append("mw_num > 1")
    elif mw_num != "any":
        clauses.append("mw_num = %d" % (int(mw_num),))

    print(rcode3)
    clauses.append("\"rcode=3/apps\" >= %f" % rcode3)

    where_clause=""
    if len(clauses) > 0: where_clause = " WHERE " + " AND ".join(clauses)
    
    query = "SELECT * FROM public.bdn_app %s ORDER BY top10m DESC, malwares[1], \"rcode=3/apps\" DESC;" % where_clause
    print(query)
    df = pd.read_sql(
        query,
        db,
    )

    df.malwares = df.malwares.apply(lambda x: ",".join(map(str, x)))
    df.top10m = df.top10m.astype(object).apply(lambda x: x if x else -1)
    df.insert(9, "!rcode/tot", (df.apps - df["rcode=0"]) / df.apps)

    df["!rcode/tot"] = df["!rcode/tot"].round(4)

    df = df.rename(
        columns={"qcode=1": "A", "qcode=TXT": "TXT", "rcode<>0 AND rcode<>3": "rc=oth"}
    )

    # df.drop(columns=["rcode=0/qcode=1", "rcode=3/qcode=1"], inplace=True)

    return df


def gen_table(mws=None, manuals=None, mw_num="any", top10m=False, rcode3=0, unique2k8k=True):

    df = get_df(mws, manuals, mw_num, top10m, rcode3, unique2k8k)

    # df['dn'] = df.dn.apply(lambda x: f"[{x}](https://www.google.com/search?q=%22{x}%22)")
    df.insert(0,'link', df.bdn.apply(lambda x: f"[{x}](https://www.google.com/search?q=%22{x}%22)"))
    cols = []
    for i in df.columns:
        col = {"name": i, "id": i} 
        if i in ["dn", "link"]:
            col["presentation"] = "markdown"
        cols.append(col)

    data_table = dash_table.DataTable(
        id="datatable_app",
        columns=cols,
        data=df.to_dict("records"),
        # style_cell={
        #     "overflow": "hidden",
        #     "textOverflow": "ellipsis",
        #     "maxWidth": 150,
        # },
        # tooltip_data=[
        #     {
        #         column: {"value": str(value), "type": "markdown"}
        #         for column, value in row.items()
        #     }
        #     for row in df[["dn", "bdn", "infected_pcap", "normal_pcap"]].to_dict(
        #         "records"
        #     )
        # ],
        tooltip_delay=0,
        tooltip_duration=None,
        filter_action="native",
        style_cell_conditional=[
            {"if": {"column_id": "malwares"}, "font-weight": "bold"},
        ],
        style_data_conditional=[
            {
                "if": {"filter_query": "{manual} = 1"},
                "backgroundColor": "lightCoral",
                "color": "white",
            },
            {
                "if": {
                    "filter_query": "{rcode<>0/tot} > 0.5",
                    "column_id": "rcode<>0/tot",
                },
                "backgroundColor": "red",
                "color": "white",
                "fontWeight": "bold",
            },
            {
                "if": {
                    "filter_query": "{rcode<>0/tot} < 0.5",
                    "column_id": "rcode<>0/tot",
                },
                "backgroundColor": "lightGreen",
                "color": "white",
                "fontWeight": "bold",
            },
            {
                "if": {"filter_query": "{manual} = 0"},
                "backgroundColor": "lightGreen",
                "color": "white",
                "fontWeight": "bold",
            },
        ],
    )

    return data_table


def gen_update_btn():

    buttons = []

    for name in manual_values:
        dbc_button = dbc.Button(
            name,
            color=manual_values[name][0],
            id="button-%s" % name,
            style={"font-family": "monospace", "font-size": "24px"},
        )
        buttons.append(dbc_button)

    return buttons


def gen_filter_bar():

    radio_malware = dbc.FormGroup(
        [
            dbc.Label("Malware", html_for="radio-malware", width=2),
            dbc.Col(
                dbc.RadioItems(
                    id="radio-malware",
                    options=[
                        {"label": str(malware["id"]), "value": malware["id"]}
                        for malware in malwares
                    ] + [{"label": "any", "value":"any"}],
                    inline=True,
                    value=1,
                ),
                width=10,
            ),
        ],
        row=True,
    )

    checkbox_manual = dbc.FormGroup(
        [
            dbc.Label("Manual", html_for="checkbox-manual", width=2),
            dbc.Col(
                dbc.Checklist(
                    id="checkbox-manual",
                    options=[
                        {"label": str(name), "value": manual_values[name][1]}
                        for name in manual_values
                    ],
                    inline=True,
                    value=[manual_values[name][1] for name in manual_values if name!="legit"],
                ),
                width=10,
            ),
        ],
        row=True,
    )

    checkbox_unique2k8k = dbc.FormGroup(
        [
            dbc.Label("Unique [2k, 8k]", html_for="radio-unique2k9k", width=2),
            dbc.Col(
                dbc.RadioItems(
                    id="radio-unique2k9k",
                    options=[{"label": n, "value": n} for n in ["YES", "NO"]],
                    inline=True,
                    value="YES",
                ),
                width=10,
            ),
        ],
        row=True,
    )

    radio_top10m = dbc.FormGroup(
        [
            dbc.Label("Top10m", html_for="radio-top10m", width=2),
            dbc.Col(
                dbc.RadioItems(
                    id="radio-top10m",
                    options=[{"label": str(n), "value": n} for n in [True, False, "any"]],
                    inline=True,
                    value="any",
                ),
                width=10,
            ),
        ],
        row=True,
    )

    radio_mw_num = dbc.FormGroup(
        [
            dbc.Label("Malware Num", html_for="radio-mw-num", width=2),
            dbc.Col(
                dbc.RadioItems(
                    id="radio-mw-num",
                    options=[
                        {"label": str(n), "value": n}
                        for n in [1, 2, 3, 0, "gt1", "any"]
                    ],
                    inline=True,
                    value=1,
                ),
                width=10,
            ),
        ],
        row=True,
    )

    radio_rcode3 = dbc.FormGroup(
        [
            dbc.Label("rcode=3/qcode=1", html_for="radio-rcode3", width=2),
            dbc.Col(
                dbc.RadioItems(
                    id="radio-rcode3",
                    options=[
                        {"label": ">=0", "value": 0},
                        {"label": ">=0.3", "value": 0.3},
                        {"label": ">=0.5", "value": 0.5},
                    ],
                    inline=True,
                    value=0,
                ),
                width=10,
            ),
        ],
        row=True,
    )

    dbc_button = dbc.Button(
        "Filter",
        id="button-filter",
        style={"font-family": "monospace", "font-size": "24px"},
    )

    inputs = [
        radio_top10m,
        radio_malware,
        checkbox_manual,
        radio_mw_num,
        radio_rcode3,
        dbc_button,
    ]

    return inputs


table = gen_table(mws=None, manuals=None)

app = dash.Dash(__name__, title="BDN", external_stylesheets=[dbc.themes.BOOTSTRAP])


app.layout = html.Div(
    [
        html.Div(gen_update_btn(), id="div-update"),
        html.Div(gen_filter_bar(), id="div-filter"),
        html.Div([table], id="div-table"),
    ],
    style={"display": "flex", "flex-direction": "column"},
)


def fun_submit(
    n_clicks_null,
    n_clicks_legit,
    n_clicks_malware,
    n_clicks_ad_related,
    n_clicks_undef,
    n_clicks_unknown,
    n_clicks_wrong,
    n_clicks_filter,
    rows,
    columns,
    selected_cells,
    mws,
    manuals,
    mw_num,
    top10m,
    rcode3
    # unique2k8k,
):
    print("fun_submit", [p["prop_id"] for p in dash.callback_context.triggered][0])

    button_name = (
        [p["prop_id"] for p in dash.callback_context.triggered][0]
        .split(".")[0]
        .replace("button-", "")
    )

    if button_name == "filter":
        return gen_table(
            mws=mws,
            manuals=manuals,
            mw_num=mw_num,
            top10m=top10m,
            rcode3=rcode3,
            unique2k8k=None,
        )

    if selected_cells is None:
        return gen_table(
            mws=mws,
            manuals=manuals,
            mw_num=mw_num,
            top10m=top10m,
            rcode3=rcode3,
            unique2k8k=None,
        )

    manual = manual_values[button_name]

    if selected_cells is not None:
        dn_ids = [rows[s["row"]]['bdn'] for s in selected_cells]

    cur = db.cursor()

    cur.execute(
        "UPDATE dn SET manual=%s WHERE bdn = ANY(%s)",
        (manual[1], dn_ids),
    )

    db.commit()

    return gen_table(
        mws=mws,
        manuals=manuals,
        mw_num=mw_num,
        top10m=top10m,
        rcode3=rcode3,
        unique2k8k=None,
    )


print(
    [Input("button-%s" % name, "n_clicks") for name in manual_values]
    + [dash.dependencies.Input("button-filter", "n_clicks")]
)

app.callback(
    Output("div-table", "children"),
    [Input("button-%s" % name, "n_clicks") for name in manual_values]
    + [dash.dependencies.Input("button-filter", "n_clicks")],
    [
        State("datatable_app", "data"),
        State("datatable_app", "columns"),
        State("datatable_app", "selected_cells"),
        dash.dependencies.State("radio-malware", "value"),
        dash.dependencies.State("checkbox-manual", "value"),
        dash.dependencies.State("radio-mw-num", "value"),
        dash.dependencies.State("radio-top10m", "value"),
        dash.dependencies.State("radio-rcode3", "value"),
        # dash.dependencies.State("radio-unique2k8k", "value"),
    ],
)(fun_submit)


if __name__ == "__main__":
    app.run_server(debug=True, port=8052)
