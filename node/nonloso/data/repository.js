
const Model = require('./model')
const Report = require('./report')
const Dataset = require('./dataset');

class ReportRepository{

    static async fetch(id, client) {
        const query = {
            name: 'fetch-report',
            text: 'SELECT * FROM reports WHERE id = $1',
            values: [id],
        };
        
        const res = await client.query(query);
        if(res.rowCount === 0) throw `Report with ${id} not found.`;
        
        const report = Report.fill(res.rows[0]);
        


        report.model = await ModelRepository.fetch(report.model_id, client)
        report.dataset = await DatasetRepository.fetch(report.dataset_id, client)

        
        return report;
    }

    static async fetchall(client) {
        const reports_ids = await client.query('SELECT id FROM reports');
        return Promise.all(reports_ids.rows.map(row => ReportRepository.fetch(row.id, client)));
    }
}

class DatasetRepository{

    static async fetch(id, client) {
        const query = {
            name: 'fetch-dataset',
            text: 'SELECT * FROM datasets WHERE id = $1',
            values: [id],
        };

        const res = await client.query(query);
        if(res.rowCount === 0) throw `Dataset with ${id} not found.`;

        return Dataset.fill(res.rows[0]);
    }

    static async fetchall(client) {
        const datasets_ids = await client.query('SELECT id FROM datasets');
        return Promise.all(datasets_ids.rows.map(row => DatasetRepository.fetch(row.id, client)));
    }
}

class ModelRepository{

    static async fetch(id, client) {
        const query = {
            name: 'fetch-model',
            text: 'SELECT * FROM models WHERE id = $1',
            values: [id],
        };

        const res = await client.query(query);
        if(res.rowCount === 0) throw `Model with ${id} not found.`;

        return Model.fill(res.rows[0]);
    }

    static async fetchall(client) {
        const models_ids = await client.query('SELECT id FROM models');
        return Promise.all(models_ids.rows.map(row => ModelRepository.fetch(row.id, client)));
    }
}

module.exports.ReportRepository = ReportRepository;
module.exports.DatasetRepository = DatasetRepository;
module.exports.ModelRepository = ModelRepository;