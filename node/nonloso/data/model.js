
var sqlite3 = require('sqlite3').verbose();
var sqlite = require('sqlite');
const Report = require('./report');

class Model {
    id;
    hash;
    date;
    epochs;
    folds;
    epoch;
    fold;
    reports;

    constructor(id) {
        this.id = Number.parseInt(id);

        if(this.id < 0) throw "Invalid id"
    }

    static async fetch(id) {
        let model = new Model(id);

        return sqlite.open({
            filename: '/home/princio/Desktop/malware_detection/models/database.sqlite3',
            driver: sqlite3.Database
        })
        .then((db) => db.get("SELECT * FROM models AS m WHERE m.id=$id", { $id: Number.parseInt(id)}))
        .then(model_db => {
            model.id = id;
            model.path = model_db.path;
            model.hash = model_db.hash;
            model.date = new Date(model_db.date);
            model.epochs = model_db.epochs;
            model.folds = model_db.folds;
            model.epoch = model_db.epoch;
            model.fold = model_db.fold;
            model.reports = undefined;
            
            return model;
        })
        .catch(error => console.log(error));
    }

    async fetch_reports() {
        const db = await sqlite.open({
            filename: '/home/princio/Desktop/malware_detection/models/database.sqlite3',
            driver: sqlite3.Database
        });

        const reports_ids = await db.all("SELECT id FROM reports AS m WHERE m.model_id=$id", { $id: this.id})
        
        this.reports = []
        for(const report_id of reports_ids)
        {
            this.reports.push(await Report.fetch(report_id.id));
        }
    }
}

module.exports = Model;