
class Model {
    id;
    hash;
    path;
    training_set;
    test_size;
    training_dataset;
    datetime;
    multiclass;
    epochs;
    folds;
    epoch;
    fold;

    static fill(row) {
        const model = new Model();
        for(const key in row) {
            if( ! (key in model) ) throw `Error in Model.fill(): fetched key '${key}' not present`
            model[key] = row[key];
        }
        return model;
    }

    async fetch_reports() {
        const db = await sqlite.open({
            filename: '/home/princio/Desktop/malware_detection/models/database.sqlite3',
            driver: sqlite3.Database
        });

        const reports_ids = await db.all("SELECT id FROM reports AS m WHERE m.model_id=$id", { $id: this.id})
        
        this.reports = []
        for(const report_id of reports_ids)
        {
            this.reports.push(await Report.fetch(report_id.id));
        }
    }
}

module.exports = Model;