var express = require('express');
var router = express.Router();
var fs = require('fs')

/* GET home page. */
router.get('/', function(req, res, next) {
  const models = JSON.parse(fs.readFileSync(__dirname + '/../../../databases/current/models.json'));
  const reports = JSON.parse(fs.readFileSync(__dirname + '/../../../databases/current/reports.json'));


  res.render('index', { title: 'Test', models, reports });
});

router.get('/3', function(req, res, next) {
  const models = JSON.parse(fs.readFileSync(__dirname + '/../../../databases/current/models.json'));
  const reports_by_model = JSON.parse(fs.readFileSync(__dirname + '/../../../databases/current/reports_by_model.json'));
  const reports = JSON.parse(fs.readFileSync(__dirname + '/../../../databases/current/reports.json'));
  const datasets = JSON.parse(fs.readFileSync(__dirname + '/../../../databases/current/datasets.json'));


  const measure_classes = [ 'white', 'black', 'macro', 'micro', 'weighted avg', 'macro avg' ];
  for (const model_id in reports_by_model) {
    models[model_id].benign_average = { 'count': 0 };
    models[model_id].malware_average = {'count': 0 };
    for (const report_id of reports_by_model[model_id]) {
      const average = models[model_id][`${datasets[reports[report_id].dataset_id].type}_average`];
      for(const measure_class of measure_classes) {
        if(!(measure_class in average)) average[measure_class] = {};
        for(const measure_name in reports[report_id][measure_class]) {
          if(!(measure_name in average[measure_class])) average[measure_class][measure_name] = 0;
          average[measure_class][measure_name] += reports[report_id][measure_class][measure_name];
        }
      }
      if(!('accuracy' in average)) average['accuracy'] = 0;
      average['accuracy'] += average['accuracy'];
      if(!('inputs_number' in average)) average['inputs_number'] = 0;
      average['inputs_number'] += average['inputs_number'];
      if(!('true_positive' in average)) average['true_positive'] = 0;
      average['true_positive'] += average['true_positive'];
      average.count++;
    }
    for(const type of ['malware_average', 'benign_average']) {
      for(const measure_class in models[model_id][type]) {
        for(const measure_name in models[model_id][type][measure_class]) {
          models[model_id][type][measure_class][measure_name] /= models[model_id][type].count;
        }
      }
      models[model_id][type]['accuracy'] /= models[model_id][type].count;
      models[model_id][type]['inputs_number'] /= models[model_id][type].count;
      models[model_id][type]['true_positive'] /= models[model_id][type].count;
    }
  }
  res.render('index3', { title: 'Test', models, reports, datasets, reports_by_model });
});


router.get('/2', function(req, res, next) {
  const models = JSON.parse(fs.readFileSync(__dirname + '/../../../databases/current/models.json'));
  const reports = JSON.parse(fs.readFileSync(__dirname + '/../../../databases/current/reports.json'));

  const models_headers = []
  const models_ = []
  for(const model_id in models) {
    let model = [ [], [], [], [] ];
    for(const model_prop in models[model_id]) {
      models_headers.push(model_prop);
      if(model_prop === 'average') {
        for(const measure_class in models[model_id]['average']['malware']) {
          let m_i = 0;
          for(const measure_name in models[model_id]['average']['malware'][measure_class]) {
            console.log(models[model_id]['average']['malware'][measure_class][measure_name]);
            model[m_i++].push(models[model_id]['average']['malware'][measure_class][measure_name]);
          }
        }
      } else {
        console.log(model);
        model[0].push(models[model_id][model_prop]);
      }
    }
    models_.push(model)
  }

  console.log(models_);
  
  res.render('index2', { title: 'Test', models_ });
});

module.exports = router;
