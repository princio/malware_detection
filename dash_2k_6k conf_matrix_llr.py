import math
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output
from plotly.subplots import make_subplots
import psycopg2
import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go
import os
from sklearn.metrics import classification_report, confusion_matrix
import plotly.figure_factory as ff


db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

# pcap_list = [
#     ["27_2017_04_30-normal.pcap", 858],
#     ["32_2017-05-02_normal.pcap", 859],
#     ["29_2017-05-01_normal.pcap", 872],
#     ["30_2017-05-01_normal.pcap", 873],
#     ["31_2017-05-01_normal.pcap", 874],
#     ["10_2013-08-20_capture-win10.pcap", 80],
#     ["303-1_2017-08-12_capture-win2.pcap", 106],
#     ["5_2013-08-20_capture-win14.pcap", 845],
#     ["7_2013-08-20_capture-win1.pcap", 846],
#     ["10_2013-08-20_capture-win9.pcap", 847],
#     ["25-2_2014-01-25_capture_win3.pcap", 848],
#     ["6_2013-08-20_capture-win6.pcap", 849],
#     ["6_2013-08-20_capture-win11.pcap", 850],
#     ["10_2013-08-20_capture-win7.original.pcap", 851],
#     ["10_2013-08-20_capture-win7.pcap", 852],
#     ["110-6_2015-06-07_capture-win9.pcap", 853],
#     ["69_2014-04-07_capture-win17.pcap", 854],
#     ["71_2014-04-07_capture-win19.fixed.pcap", 855],
#     ["25-6_2014-12-20_capture-win3.pcap", 856],
#     ["170-1_capture-win6.pcap", 857]
# ]

def f_llr(s_nosfx):
    num = s_nosfx.replace([0, 1], [0.000_000_000_000_1, 1-0.000_000_000_000_1])
    den = np.ones(len(num)) - num
    llr = np.log(num/den)
    return llr

df_pcap = pd.read_sql('SELECT id, "name", "infected", "qr", q, r, "unique", days FROM pcap WHERE "unique" > 2000 and "unique"< 6000 ORDER BY name', db)

if not os.path.exists('/tmp/wins.csv'):
    wins_cols=['pcap_id', 'infected', 'llr', 'win_n', 'size']
    df_wins = pd.DataFrame([], columns=wins_cols)
    for _,pcap in df_pcap.iterrows():
        df = pd.read_sql('select * from message_dn mdn where pcap_id=%d and is_response=false order by time' % pcap['id'], db)
        df['llr'] =  f_llr(df.nosfx)
        df['1k'] =  df.index // 1000
        df['size'] =  1
        df_win = df[['1k', 'llr', 'size']].groupby('1k').sum().reset_index().rename(columns={'1k': 'win_n'})
        df_win['infected'] = pcap['infected']
        df_win['pcap_id'] = pcap['id']
        df_wins = pd.concat([df_wins, df_win[wins_cols]])
        df_wins.to_csv('/tmp/wins.csv')
        df = df_wins
else:
    df = pd.read_csv('/tmp/wins.csv')

th = 0

y_true = df.infected
y_pred = df.llr > th

t_infected = (y_true & y_pred).sum()
f_infected = (~y_true & y_pred).sum()
t_normal = (y_true & ~y_pred).sum()
f_normal = (~y_true & ~y_pred).sum()


report = classification_report(y_true, y_pred, target_names=['not infected', 'infected'])
cmatrix = confusion_matrix(y_true, y_pred)

print(report)
print(cmatrix)

print(t_normal, f_infected)
print(f_normal, t_infected)

# df_cm = pd.DataFrame([ (y_true & y_pred), columns])


y = ['predict normal', 'predict infected']
x = ['true normal', 'true infected']

z = cmatrix#[[t_normal, f_infected], [f_normal, t_infected]]
z_text = cmatrix#[[t_normal, f_infected], [f_normal, t_infected]]

fig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='Viridis')

app = dash.Dash(__name__)

app.layout = html.Div([
    html.Div(
        dcc.Graph(figure=fig),
        id='bar-container'
    ),
    html.Pre(
        report,
        id='report-container',
        style={'font-family': 'monospace', 'font-size': '20px'}
    ),
    html.Pre(
        cmatrix,
        id='cm-container',
        style={'font-family': 'monospace', 'font-size': '20px'}
    )
])

if __name__ == '__main__':
    app.run_server(debug=False)
