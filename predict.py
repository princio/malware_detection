from Model import Model, DomainLevel
import numpy as np
import Paths
import csv
from plot_num import plot_num


def plot(predictions, frame_infection_number):
    import matplotlib.pyplot as plt

    deltas = [int(len(predictions)*0.026), int(len(predictions)*0.05)]

    for idx, delta in enumerate(deltas):
        if delta == 0:
            deltas[idx] = 1

    x, good_binary, bad_binary, good_float, bad_float = plot_num(predictions, frame_infection_number, deltas=deltas)
    
    _fig, axs = plt.subplots(2, len(deltas))  # Create a figure and an axes.  
    for idx, delta in enumerate(deltas):
        axs[0, idx].plot(x[delta], good_binary[delta], label=f'good_binary')
        axs[0, idx].plot(x[delta], bad_binary[delta], label=f'bad_binary')
        axs[0, idx].set_title(f'binary prediction sum with delta={delta}')
        axs[0, idx].legend()

        axs[1, idx].plot(x[delta], good_float[delta], label=f'good_float')
        axs[1, idx].plot(x[delta], bad_float[delta], label=f'bad_float')
        axs[1, idx].set_title(f'float prediction with delta={delta}')
        axs[1, idx].legend()

        if frame_infection_number is not None:
            axs[0, idx].axvline(x=frame_infection_number, color='red')
            axs[1, idx].axvline(x=frame_infection_number, color='red')

    plt.show()


def predict():
    inputs = '2542116.fls.doubleclick.net,dwgyu36up6iuz.cloudfront.net,4798504.fls.doubleclick.net,clients2.googleusercontent.com,armmf.adobe.com,download.skype.com,evcs-ocsp.ws.symantec.com,gtssl-ocsp.geotrust.com,www.manchesteronline.co.uk,dy48bnzanqw0v.cloudfront.net,dnkzzz1hlto79.cloudfront.net,adclick.g.doubleclick.net,clients2.google.com,r2---sn-2gb7ln7l.gvt1.com,tools.google.com,sw.symcd.com,dff7tx5c2qbxc.cloudfront.net,ardownload.adobe.com,securepubads.g.doubleclick.net,www.independent.co.uk,r13---sn-25g7sm7r.c.pack.google.com'
    inputs = inputs.split(',')

    model = Model(Paths.model_top['path'])
    ptt, _, _ = model.predict(inputs, '/tmp/0_top_top.csv', DomainLevel.TOP)

    model = Model(Paths.model_side['path'])
    pst, _, _ = model.predict(inputs, '/tmp/0_side_top.csv', DomainLevel.TOP)

    model = Model(Paths.model_top['path'])
    pts, _, _ = model.predict(inputs, '/tmp/0_top_side.csv', DomainLevel.SIDE)

    model = Model(Paths.model_side['path'])
    pss, _, _ = model.predict(inputs, '/tmp/0_side_side.csv', DomainLevel.SIDE)

    with open('/tmp/0_tot.csv', 'w') as f:
        writer = csv.writer(f)
        writer.writerows([[i, ptt[idx][0], pst[idx][0], pts[idx][0], pss[idx][0]] for idx, i in enumerate(inputs)])
    
    plot(pss, 0)

    pass

if __name__ == "__main__":
    predict()
    pass