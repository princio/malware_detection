from Capture import normal, mixed, botnet, training, Capture
from IO import Input, Output, DF
from Model import Model
from DomainLevel import Transformer
import numpy as np
import pandas as pd

# def predict_all_standard():
#     models = [ Model.load(DomainLevel.LOWERT), Model.load(DomainLevel.LOWER), Model.load(DomainLevel.SIDE) ]
#     dls = DomainLevel.all()
#     dls.remove(DomainLevel.WHOLE)
#     captures = []
#     captures += [normal[name] for name in normal]
#     captures += [mixed[name] for name in mixed]
#     captures += [botnet[name] for name in botnet]
#     captures.append(training)
    
#     for capture in captures:
#         for dl in dls:
#             input = Input(capture, dl)
#             for model in models:
#                 print(f'Predicting {input.name} with {model.name}...')
#                 Output.predict(input, model)

def predict_all():
    model = Model.load(Transformer.NOTLD)
    dls = [ Transformer.NOTLD, Transformer.DOMAIN, Transformer.SUBDOMAIN ]
    captures = []
    captures += [normal[name] for name in normal]
    captures += [mixed[name] for name in mixed]
    captures += [botnet[name] for name in botnet]
    captures.append(training)
    
    for capture in captures:
        for dl in dls:
            input = Input(capture, dl)
            print(f'Predicting {input.name} with {model.name}...')
            Output.predict(input, model, redo=True)

def predict_normal():

    captures = [normal['31']]

    models = [Model.load(1), Model.load(2), Model.load(-3)]
    trs= [ Transformer.NOSFX, Transformer.NOSFX_NP, Transformer.DOMAIN, Transformer.LAST ]

    outputs = []
    false_dga = {}
    false_dga_levels = {}
    false_dga_levels_dn = {}
    level_1_df = None
    for capture in captures:
        for tr in trs:
            false_dga[(capture.name, tr.name)] = {}
            for model in models:
                input  = Input(capture, tr)
                output = Output.predict(input, model, False)
                output.threshold = 0.5
                outputs.append(output)
                false_dga[(capture.name, tr.name)][('frac', model.name)] = output.DF.reset().unique().dga().DF.shape[0]
                if tr.name not in ['DOMAIN', 'LAST']:
                    false_dga_levels[(capture.name, tr.name, model.name)] = output.DF.reset().unique().level_count.T.to_dict()
                    level = output.DF.unique().level_dn
                    level.loc[level['level'] == '1'].to_csv('/tmp/%s_%s_%s.csv' % (capture.name, tr.name, model.name))
                    if None is level_1_df:
                        level_1_df = level.loc[level['level'] == '1']
                    else:
                        level_1_df = level_1_df.merge(level.loc[level['level'] == '1'], left_index=True, right_index=True, how='outer', suffixes=['', (capture.name, tr.name, model.name)])
                false_dga_levels_dn[(capture.name, tr.name, model.name)] = output.DF.reset().unique().dga().level_count_dn.T.to_dict()
    
    DF.compare(outputs)

    level_1_df.to_csv('/tmp/ciao2.csv')

    pd.DataFrame(false_dga).to_csv('/tmp/ciao3.csv')

    # print('%50s\t\t%8s\t%8s\t%8s' % ('', '1', '2', '>3'))
    # for k in false_dga_levels:
    #     ss = ''
    #     for l in false_dga_levels[k]:
    #         ss += '%0.8f\t' % (false_dga_levels[k][l])
    #     print('%50s\t\t%s' %(k, ss))

    print(pd.DataFrame(false_dga_levels_dn).to_markdown())
    print(pd.DataFrame(false_dga_levels_dn).to_clipboard())
    print('%50s\t\t%8s\t%8s\t%8s' % ('', '1', '2', '>3'))
    for k in false_dga_levels_dn:
        ss = ''
        for l in false_dga_levels_dn[k]:
            ss += '%0.8f\t' % (false_dga_levels_dn[k][l])
        print('%50s\t\t%s' %(k, ss))
    # print(pd.DataFrame(false_dga_levels).to_markdown())
    # print(pd.DataFrame(false_dga_levels).to_clipboard())

        # X = input.X
        # model.load_model()
        # nn = model.nn
        # Y = nn.predict(X)
        # df = pd.DataFrame({'X': X, 'Y': Y[:,0] })
        # df_unique = df.drop_duplicates()
        # df_wrong = df_unique.loc[df_unique['Y'] >= 0.5]
        # print(df, df_unique, df_wrong)
        # print(df_wrong.shape[0]/df_unique.shape[0])
        # print(df_wrong.shape[0]/df_unique.shape[0])



if __name__ == "__main__":

    predict_normal()

    pass