
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output
from plotly.subplots import make_subplots
import sqlite3
import pandas as pd
import os
import plotly.express as px
import numpy as np

dirs = {
    'malware': '/media/princio/ssd512/stratosphere/pcap/csv/malware/',
    'normal': '/media/princio/ssd512/stratosphere/pcap/csv/normal/'
}


try:
    pcap_dict
except NameError:
    pcap_dict = {'normal':{}, 'botnet':{}}
    
try:
    pcap_names
except NameError:
    pcap_names = {'normal':{}, 'botnet':{}}

def get_type(pcapname):
    bot_path = os.path.join(dirs['malware'], pcapname)
    nor_path = os.path.join(dirs['normal'], pcapname)
    if os.path.exists(bot_path):
        type_='botnet'
        df_path = bot_path
    elif os.path.exists(nor_path):
        type_='normal'
        df_path = nor_path
    else:
        return None
    return type_, df_path
    
def get_df(pcapname, reload=False):
    if reload:
        type_, df_path = get_type(pcapname)
        pcap_dict[type_][pcapname] = pd.read_csv(df_path, usecols=list(range(0,12)))
        return pcap_dict[type_][pcapname]
    
    if pcapname in pcap_dict['botnet']:
        return pcap_dict['botnet'][pcapname]
    if pcapname in pcap_dict['normal']:
        return pcap_dict['normal'][pcapname]
    
    type_, df_path = get_type(pcapname)
    pcap_dict[type_][pcapname] = pd.read_csv(df_path, usecols=list(range(0,12)))
    return pcap_dict[type_][pcapname].copy()

def file_list(_dir):
    files = []
    for walker in os.walk(_dir):
        for filenames in walker[2]:
            files.append(os.path.join(_dir, filenames))
    return files

def walkk(dfs, dir_):
    for type_ in ['malware', 'normal']:
        files = file_list(dir_)
        for file in files:
            fname = os.path.basename(file)
            if fname[-4:] != '.csv': continue
            if fname in dfs: continue
            dfs[fname] = pd.read_csv(file, usecols=list(range(0,12)))
        return dfs


df = get_df('42_botnet-capture-20110810-neris.pcap.csv')


if False:
    #### RESAMPLING ####
    df.index = pd.DatetimeIndex(df['frame.time_epoch_req']*1_000_000_000)
    df_res = df.copy()
    df_res = df_res.drop(columns=['frame.number_req', 'frame.time_epoch_req', 'frame.time_epoch_res', 'dns_server_ip', 'dns.qry.name', 'dns.qry.type'])
    sum_columns = [ 'count', 'no-response', 'response-ok', 'no-such-name', 'legit_list', 'nosfx' ]
    average_columns = [ 'dns.time', 'nosfx_0.1', 'domain_0.1' ]
    df_res['count'] = 1
    df_res['no-response'] = df_res['frame.number_res'].isna().astype(int)
    df_res['response-ok'] = df_res['dns.flags.rcode'].apply(lambda x: x == 0).astype(int)
    df_res['no-such-name'] = df_res['dns.flags.rcode'].apply(lambda x: x == 3).astype(int)
    df_res['nosfx'] = df_res['nosfx_0.1'].apply(lambda x: x > 0.5).astype(int)
    df_res = df_res.resample('3T')
    df_res = pd.concat([df_res[sum_columns].sum(), df_res[average_columns].mean()], axis=1)
    print(df_res)
    df_res['nosfxness'] = df_res['nosfx'].div(df_res['count']).fillna(0)#.apply(lambda x: 'resp-ok <0.5' if x < 0.5 else 'resp-ok >0.5')
    df_res['responseness'] = df_res['response-ok'].div(df_res['count']).fillna(0).rsub(1)#.apply(lambda x: 'resp-ok <0.5' if x < 0.5 else 'resp-ok >0.5')
    df_res['legitness'] = df_res['legit_list'].div(df_res['count']).apply(lambda x: 'legit <0.5' if x < 0.5 else 'legit >0.5')
    df_res['count'] = df_res['count'].apply(lambda x: '<100' if x < 100 else '[100,1000]' if x < 1000 else '>1000')
    fig = px.scatter(df_res, x=df_res.index, y="nosfx", color="count", size='responseness', symbol='legitness', hover_data=sum_columns)
    fig.show()
    #### RESAMPLING ####


#### RESAMPLING ####
df_res = df.copy()
df_res = df_res.drop(columns=['frame.number_req', 'frame.time_epoch_req', 'frame.time_epoch_res', 'dns_server_ip', 'dns.qry.name', 'dns.qry.type'])
sum_columns = [ 'count', 'no-response', 'response-ok', 'no-such-name', 'legit_list', 'nosfx', 'ciccio' ]
average_columns = [ 'dns.time', 'nosfx_0.1', 'domain_0.1' ]
df_res['count'] = 1
df_res['no-response'] = df_res['frame.number_res'].isna().astype(int)
df_res['response-ok'] = df_res['dns.flags.rcode'].apply(lambda x: x == 0).astype(int)
df_res['no-such-name'] = df_res['dns.flags.rcode'].apply(lambda x: x == 3).astype(int)
df_res['ciccio'] = df_res['response-ok'].add(df_res['legit_list'])
df_res['nosfx'] = df_res['nosfx_0.1'].apply(lambda x: x > 0.5).astype(int)
df_res = df_res.resample('3T')
df_res = pd.concat([df_res[sum_columns].sum(), df_res[average_columns].mean()], axis=1)
print(df_res)
df_res['nosfxness'] = df_res['nosfx'].div(df_res['count']).fillna(0)#.apply(lambda x: 'resp-ok <0.5' if x < 0.5 else 'resp-ok >0.5')
df_res['responseness'] = df_res['response-ok'].div(df_res['count']).fillna(0).rsub(1)#.apply(lambda x: 'resp-ok <0.5' if x < 0.5 else 'resp-ok >0.5')
df_res['legitness'] = df_res['legit_list'].div(df_res['count']).apply(lambda x: 'legit <0.5' if x < 0.5 else 'legit >0.5')
df_res['count'] = df_res['count'].apply(lambda x: '<100' if x < 100 else '[100,1000]' if x < 1000 else '>1000')
fig = px.scatter(df_res, x='ciccio', y="nosfx", color="count", size='responseness', symbol='legitness', hover_data=sum_columns)
fig.show()
#### RESAMPLING ####

# df = get_df('42_botnet-capture-20110810-neris.pcap.csv')
# df['esito'] = df['dns.flags.rcode'].apply(lambda x: 'no-resp' if np.isnan(x) else 'resp-ok' if x == 0 else 'no-such-name' if x == 3 else 'resp-err')
# df['dns.time'] = df['dns.time'].fillna(0.1)
# fig = px.scatter(df, x="frame.time_epoch_req", y="nosfx_0.1", color="esito", hover_data=['dns.qry.name'])
# fig.show()


# if __name__ == '__main__':
#     app.run_server(debug=False)
