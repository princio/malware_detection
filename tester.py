from PyInquirer import prompt, Separator
import hashlib
from Model import Model
from Dataset import Dataset
from Report import Report
import psycopg2

connection = psycopg2.connect(user = "postgres",
                                  password = "porcodio",
                                  host = "127.0.0.1",
                                  port = "5432",
                                  database = "malware")
cursor = connection.cursor()

def inquire():
    cursor = connection.cursor()
    cursor.execute("select * from models")
    models = cursor.fetchall()
    models = [{"value": Model.fill(model), "name": model[1]} for model in models]
    questions = [
        {
            'type': 'checkbox',
            'name': 'models',
            'message': 'Which dataset do you want to use as input?',
            'choices': models
        }
    ]
    models = prompt(questions)["models"]

    cursor = connection.cursor()
    cursor.execute("select * from datasets")
    datasets = cursor.fetchall()
    datasets = [{"value": Dataset.fill(dataset), "name": dataset[1]} for dataset in datasets]
    questions = [
        {
            'type': 'checkbox',
            'name': 'datasets',
            'message': 'Select one or more files',
            'choices': datasets,
            'pageSize': 5
        }
    ]
    datasets = prompt(questions)["datasets"]

    questions = [
        {
            'default': False,
            'type': 'confirm',
            'name': 'shuffle',
            'message': 'Shuffle dataset?'
        }
    ]
    shuffle = prompt(questions)["shuffle"]

    return (models, datasets, shuffle)

def dataset_hash(path):
    sha256_hash = hashlib.sha256()
    with open(f"{path}.csv", "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            print(len(byte_block))
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def test(models, datasets, shuffle):

    for model in models:
        for dataset in datasets:
            report = Report()
            if shuffle:
                dataset = Dataset.shuffle(dataset, connection)
                model.test(dataset, report)
            else:
                model.test(dataset, report)

            report.metrics()
            report.save(connection)

            print(report)
            print(report.id)

            
            
if __name__ == "__main__":
    models, datasets, shuffle = inquire()
    test(models, datasets, shuffle)