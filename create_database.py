import sqlite3
import json
import time
from datetime import datetime
from PyInquirer import prompt, Separator
import os, fnmatch
import itertools
from collections import OrderedDict
import csv
from pymongo import MongoClient
import hashlib
import re
import pprint

def pretty(d, indent=0):
   for key, value in d.items():
      print('\t' * indent + str(key))
      if isinstance(value, dict):
         pretty(value, indent+1)
      else:
         print('\t' * (indent+1) + str(value))

def inquire():
    files = { 'datasets': { 'benign': [], 'malware': [] }, 'models': []}

    for type_ in ['benign', 'malware']:
        type_files = os.listdir(f"datasets/{type_}_h_t")
        for dataset in type_files:
            with open(f"datasets/{type_}_h_t/{dataset}", "r") as fp:
                reader = csv.reader(fp)
                row_counter = 0
                for row in reader:
                    row_counter = row_counter + 1

            m = re.search(r'(\d+)_(\d{4}-\d{2}-\d{2})_([\w\-]+)\.([\w\-]+).csv__h_t.csv', dataset)
            if m is None:
                print(f'Strange dir: {dataset}')
            else:
                files['datasets'][type_].append({
                    'name': dataset,
                    'type': type_,
                    'inputs_number': row_counter,
                    'index': m.group(1),
                    'date': datetime.strptime(m.group(2), "%Y-%m-%d"),
                    'from': m.group(3),
                    'table': m.group(4)
                })

    dirs = os.listdir("models/")

    for dir_ in dirs:
        m = re.search(r'(\d{8}_\d{6})__epochs_(\d+)_folds_(\d+)', dir_)
        if m is None:
            print(f'Strange dir: {dir_}')
        else:
            models = {
                'date': datetime.strptime(m.group(1), "%Y%m%d_%H%M%S"),
                'epochs': m.group(2),
                'folds': m.group(3),
                'models': []
            }
            for model_fold_epoch in os.listdir(f"models/{dir_}"):
                m = re.search(r'(\w+)_model_fold_(\d+)_epoch_(\d+)\.(json|h5)', model_fold_epoch)
                if m is None:
                    print(f'Strange model: {model_fold_epoch}')
                else:
                    models['models'].append({
                        'type': m.group(1),
                        'fold': m.group(2),
                        'epoch': m.group(3)
                    })

    files['models'] = models


    pp = pprint.PrettyPrinter(indent=2)
    pp.pprint(files)
    

    return files


def file_hash(path):
    sha256_hash = hashlib.sha256()
    with open(path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            print(len(byte_block))
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def model_hash(path):
    sha256_hash = hashlib.sha256()
    with open(f"{path}.json", "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            print(len(byte_block))
            sha256_hash.update(byte_block)
    with open(f"{path}.h5", "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            print(len(byte_block))
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

if __name__ == "__main__":
    inquire()