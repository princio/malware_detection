import pyshark
import os
from enum import Enum
import pprint
import pandas as pd
import time

pp = pprint.PrettyPrinter(indent=4)

ROOT_DIR = '/media/ssd512/stratosphere/'
def root_join(path, *paths):
    return os.path.join(ROOT_DIR, path, *paths)

class Capture_Packet_Type(Enum):
    RESP = 0
    REQ  = 1
    BOTH = 2

class Capture_Type(Enum):
    NORMAL = 0
    BOTNET = 1
    MIXED  = 2
    
class Capture_Version(Enum):
    FULL_PCAP = 0
    DNS_PCAP  = 1
    DNS_CSV   = 2
    DN_CSV    = 3
    
class Capture_Prediction(Enum):
    Y         = 0
    Y_UNIQUE  = 1

    
class PcapCapture():
    BUFFER = 10_00

    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(path)
        self.chosen_dns_fields = [ 'count_labels', 'count_queries', 'flags_authenticated', 'flags_response', 'qry_name', 'qry_type', 'qry_class','resp_ttl', 'resp_name', 'response_to', 'time', 'a', 'aaaa' ]

    def _flush(self, data, i, first, columns):
            pd.DataFrame(data, index=pd.RangeIndex(i -  len(data), i), columns=columns)\
                .to_csv(self.path + '.csv', mode='w' if first else 'a', header=first)
            first = False
            data = []
            print('saving...', first)

    def save_csv(self, only_dn=True, packet_type=Capture_Packet_Type.REQ, pkt_num = 0, timeout = 0):
        tshark_cap = pyshark.FileCapture(self.path, keep_packets=False, display_filter="dns && !_ws.malformed && !icmp")
        i = 0
        first = True
        time_begin = time.time()
        
        chosen_dns_fields = ['qry_name'] if only_dn else self.chosen_dns_fields.copy()
        columns = ['frame_number', 'timestamp'] + chosen_dns_fields

        data = []
        while True:
            try:
                packet = tshark_cap.next()
                if 'DNS' in packet:
                    i += 1
                    data.append([packet.number, packet.sniff_time.timestamp()] + [packet['DNS'].get_field(cf) for cf in chosen_dns_fields])
                    if len(data) > PcapCapture.BUFFER:
                        self._flush(data, i, first, columns)

            except StopIteration:
                break
            if timeout != 0 and (time.time() - time_begin) > timeout: break
            if pkt_num > 0 and i > pkt_num: break

        if len(data) > 0:
            self._flush(data, i, first, columns)

        tshark_cap.close()

path = '/tmp/capture/371-1_2017-2-20_win10.pcap'
# path = '/tmp/capture/264-1_2017-06-24_win3.pcap'

print('sync...')
pcap_capture = PcapCapture(path)
timer_sync = time.time()
pcap_capture.save_csv(only_dn=True)
timer_sync = time.time() - timer_sync
print('Time sync:  %2.5f' % timer_sync)


print('sync...')
pcap_capture = PcapCapture(path)
timer_sync = time.time()
pcap_capture.save_csv()
timer_sync = time.time() - timer_sync
print('Time sync:  %2.5f' % timer_sync)
