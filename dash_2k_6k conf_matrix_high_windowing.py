import math
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output
from plotly.subplots import make_subplots
import dash_bootstrap_components as dbc

import psycopg2
import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go
import os
from sklearn.metrics import classification_report, confusion_matrix
import plotly.figure_factory as ff


db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")


df_pcap = pd.read_sql(
    'SELECT id, "name", "malware_id", "infected", "qr", q, r, "unique", days FROM pcap ORDER BY name',
    db,
)

dfs = {}

def gen_fig(pcap=80, window=1000, skip_legit=True):
    print(skip_legit)
    if skip_legit:
        query = (
            "SELECT * FROM qr_grouped_view WHERE legit is not True and pcap_id=%d ORDER BY q_time ASC"
            % pcap
        )
    else:
        query = (
            "SELECT * FROM qr_grouped_view WHERE pcap_id=%d ORDER BY q_time ASC" % pcap
        )
    df = pd.read_sql(query, db)

    def f_llr(s_nosfx):
        num = s_nosfx.replace([0, 1], [0.000_000_000_000_1, 1 - 0.000_000_000_000_1])
        den = np.ones(len(num)) - num
        llr = np.log(num / den)
        return llr


    df["llr"] = f_llr(df.nosfx)
    df["window"] = df.index // window
    df["app"] = 1
    df["ok"] = df.rcode.apply(lambda x: 1 if x == 0 else 0)
    df["nx"] = df.rcode.apply(lambda x: 1 if x == 3 else 0)
    df["no"] = df.rcode.fillna(value=-1).apply(lambda x: 1 if x == -1 else 0)
    df["txt"] = df.qcode.apply(lambda x: 1 if x == 16 else 0)
    df["top10m"] = df["top10m"].astype(np.single)

    dfs[pcap] = df.copy()

    sum_cols = ["llr", "app", "nx", "no", "txt"]
    aggs = { c : "sum" for c in sum_cols}
    aggs["dn"] = "nunique"

    df_win = df[["window", "dn"] + sum_cols].groupby("window").agg(aggs).reset_index().rename(columns={"dn":"unique"})

    df_win["pcap_id"] = pcap

    values = []
    for _, win in df_win.iterrows():
        win.window = win.window.astype(int)
        win.pcap_id = win.pcap_id.astype(int)
        win.app = win.app.astype(int)
        win.nx = win.nx.astype(int)
        win.no = win.no.astype(int)
        win.txt = win.txt.astype(int)
        values 


    fig = px.scatter(df_win, x="window", y="llr", custom_data=["pcap_id", "window"])
    fig.update_layout(clickmode="event+select")

    return fig


app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])


def gen_div(app):

    radio_legit = dbc.FormGroup(
        [
            dbc.Label("Skip Legit", html_for="radio-legit", width=2),
            dbc.Col(
                dbc.RadioItems(
                    id="radio-legit",
                    options=[
                        {"label": "Yes", "value": True},
                        {"label": "No", "value": False},
                    ],
                    inline=True,
                    value=False,
                ),
                width=10,
            ),
        ],
        row=True,
    )

    def fun_submit(sc, skip_legit):
        print(skip_legit)
        if sc is None or sc == 0:
            vpcap = df_pcap.iloc[0].id
        else:
            vpcap = sc[0]["row_id"]

        return [dcc.Graph(figure=gen_fig(pcap=vpcap, skip_legit=skip_legit), id="figure-win")]

    # return dbc.Row([dbc.Col(pcap_form, width=5), dbc.Col(dbc_button, width=2)])

    table = dash_table.DataTable(
        id="pcap-table",
        columns=[{"id": i, "name": i} for i in df_pcap.columns],
        data=df_pcap.to_dict("records"),
    )

    app.callback(
        Output("result-container", "children"),
        dash.dependencies.Input("pcap-table", "selected_cells"),
        [dash.dependencies.State("radio-legit", "value"),]
    )(fun_submit)

    return [radio_legit, table]


app.layout = html.Div(
    [
        html.Div(
            gen_div(app),
            id="toolbar-container",
            style={"height": "250px", "overflow": "auto"},
        ),
        html.Div(
            [dcc.Graph(figure=gen_fig(80), id="figure-win")], id="result-container"
        ),
        html.Div([], id="click-data"),
    ],
)


@app.callback(Output("click-data", "children"), Input("figure-win", "clickData"))
def display_click_data(clickData):
    if clickData is None:
        return []

    cd = clickData["points"][0]["customdata"]

    df_qr = dfs[cd[0]].copy()
    df_qr = df_qr[df_qr.window == cd[1]]
    df_qr = df_qr[["dn", "nosfx", "top10m", "llr", "app", "ok", "nx", "no", "txt"]]
    df_qr.top10m = df_qr.top10m.fillna(-1).astype(int)

    df_qr = df_qr.groupby(by=["dn", "nosfx", "llr", "top10m"]).sum().reset_index()

    df_qr.llr = df_qr.llr.round(6)

    df_qr.insert(4, "nx/app", df_qr.nx / df_qr.app)

    df_qr = df_qr.sort_values(by="nx/app", ascending=False)

    return dash_table.DataTable(
        data=df_qr.to_dict("records"),
        columns=[{"name": i, "id": i} for i in df_qr.columns],
    )


if __name__ == "__main__":
    app.run_server(debug=False, port=8051)
