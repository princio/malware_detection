import math
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output
from plotly.subplots import make_subplots
import dash_bootstrap_components as dbc

import psycopg2
import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go
import os
from sklearn.metrics import classification_report, confusion_matrix
import plotly.figure_factory as ff


db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

# pcap_list = [
#     ["27_2017_04_30-normal.pcap", 858],
#     ["32_2017-05-02_normal.pcap", 859],
#     ["29_2017-05-01_normal.pcap", 872],
#     ["30_2017-05-01_normal.pcap", 873],
#     ["31_2017-05-01_normal.pcap", 874],
#     ["10_2013-08-20_capture-win10.pcap", 80],
#     ["303-1_2017-08-12_capture-win2.pcap", 106],
#     ["5_2013-08-20_capture-win14.pcap", 845],
#     ["7_2013-08-20_capture-win1.pcap", 846],
#     ["10_2013-08-20_capture-win9.pcap", 847],
#     ["25-2_2014-01-25_capture_win3.pcap", 848],
#     ["6_2013-08-20_capture-win6.pcap", 849],
#     ["6_2013-08-20_capture-win11.pcap", 850],
#     ["10_2013-08-20_capture-win7.original.pcap", 851],
#     ["10_2013-08-20_capture-win7.pcap", 852],
#     ["110-6_2015-06-07_capture-win9.pcap", 853],
#     ["69_2014-04-07_capture-win17.pcap", 854],
#     ["71_2014-04-07_capture-win19.fixed.pcap", 855],
#     ["25-6_2014-12-20_capture-win3.pcap", 856],
#     ["170-1_capture-win6.pcap", 857]
# ]


def calc_windows(
    window=1000,
    true_fun="pcap-label",
    true_th=0,
    pred_fun="llr",
    pred_th=0,
    exclude=False,
    nn="nosfx",
):

    fname = "/media/princio/ssd512/stratosphere/window/win_%d_%s%s.csv" % (
        window,
        nn,
        f"_{exclude}" if exclude else "",
    )

    def f_llr(s_nosfx):
        num = s_nosfx.replace([0, 1], [0.000_000_000_000_1, 1 - 0.000_000_000_000_1])
        den = np.ones(len(num)) - num
        llr = np.log(num / den)
        return llr

    df_pcap = pd.read_sql(
        'SELECT id, "name", "malware_id", "infected", "qr", q, r, "unique", days FROM pcap WHERE "unique" > 2000 and "unique"< 6000 ORDER BY name',
        db,
    )

    print("Windowing with %d" % window)
    print(fname, os.path.exists(fname))
    if not os.path.exists(fname):
        pcap_cols = ["pcap_id", "malware_id", "infected"]
        wins_cols = [
            "window",
            "llr",
            "size",
            "nx",
            "no",
            "txt",
            "nx_top10m",
            "no_top10m",
            "txt_top10m",
        ]
        df_wins = pd.DataFrame([], columns=wins_cols)
        for _, pcap in df_pcap.iterrows():
            excludes = {"exc-1": [0.2, 0.8], "exc-2": [0.3, 0.7], "exc-3": [0.4, 0.6]}

            if exclude:
                query = "SELECT * FROM qr_grouped_view WHERE pcap_id=%d AND NOT (%s > %f AND %s < %f) ORDER BY q_time" % (pcap["id"], nn, excludes[exclude][0], nn, excludes[exclude][1])
            else:
                query = "SELECT * FROM qr_grouped_view WHERE pcap_id=%d ORDER BY q_time"% (pcap["id"])
            df = pd.read_sql(query, db)

            df["llr"] = f_llr(df[nn])
            df["window"] = df.index // window
            df["size"] = 1
            df["nx"] = df.rcode.apply(lambda x: 1 if x == 3 else 0)
            df["no"] = df.rcode.fillna(value=-1).apply(lambda x: 1 if x == -1 else 0)
            df["txt"] = df.qcode.apply(lambda x: 1 if x == 16 else 0)
            df['top10m'] = df['top10m'].astype(np.single)
            df["nx_top10m"] = df[["nx", "top10m"]].apply(
                lambda x: 1 if (x[0] == 1) and np.isnan(x[1]) else 0, axis=1
            )
            df["no_top10m"] = df[["no", "top10m"]].apply(
                lambda x: 1 if (x[0] == 1) and np.isnan(x[1]) else 0, axis=1
            )
            df["txt_top10m"] = df[["txt", "top10m"]].apply(
                lambda x: 1 if (x[0] == 1) and np.isnan(x[1]) else 0, axis=1
            )

            df_win = df[wins_cols].groupby("window").sum().reset_index()
            df_win["infected"] = bool(pcap["infected"])
            df_win["pcap_id"] = pcap["id"]
            df_win["malware_id"] = pcap["malware_id"]

            df_wins = pd.concat(
                [df_wins, df_win[pcap_cols + wins_cols]], ignore_index=True
            )
        df_wins.to_csv(fname)

    df = pd.read_csv(fname, index_col=0).reset_index()

    df.malware_id = (
        df.malware_id.fillna(-1)
        .astype(int)
        .astype(str)
        .replace(to_replace=-1, value="no-malware")
    )

    df["nx_no"] = df.nx + df.no
    df["nx_no_txt"] = df.nx + df.no + df.txt

    df["nx_no_top10m"] = df.nx_top10m + df.no_top10m
    df["nx_no_txt_top10m"] = df.nx_top10m + df.no_top10m + df.txt_top10m

    dict_fun = {
        "pcap-label": lambda th: (df.infected.astype(bool), "Pcap-label"),
        "llr": lambda th: (df.llr > th, "LLR > %f" % th),
        "avg-nx": lambda th: (df.nx_no_txt > th, "avg(NX+NO+TXT) > %d" % th),
        "avg-nx-top10m": lambda th: (df.nx_no_txt_top10m > th, "avg(NX+NO+TXT)_TOP10M > %d" % th),
    }

    fun_true = dict_fun[true_fun](true_th)
    fun_pred = dict_fun[pred_fun](pred_th)

    y_true = fun_true[0]
    y_pred = fun_pred[0]

    report = classification_report(
        y_true, y_pred, target_names=["not infected", "infected"]
    )
    cmatrix = confusion_matrix(y_true, y_pred)
    x = ["normal", "infected"]
    y = ["normal", "infected"]
    z = cmatrix
    z_text = cmatrix
    fig = ff.create_annotated_heatmap(
        z, x=x, y=y, annotation_text=z_text, colorscale="Viridis"
    )
    fig.update_layout(
        height=300, width=600, font=dict(size=24), margin=dict(t=20, l=20, b=20, r=20)
    )
    fig.update_xaxes(title="predict", title_font={"size": 20})
    fig.update_yaxes(title="true", title_font={"size": 20}, tickfont={"size": 20})
    return [
        html.Div(
            [
                html.H2("Window: %d" % window),
                html.H2("True: " + fun_true[1]),
                html.H2("Predict: " + fun_pred[1]),
                html.H2("Exclude: %s" % (exclude if exclude else "None")),
                html.H2("NN: " + nn),
            ],
            # style={"width": "450px", "height": "100%", "margin-top": "50px"},
        ),
        html.Div(
            [
                html.Div(dcc.Graph(figure=fig)),
                html.Pre(
                    report, style={"font-family": "monospace", "font-size": "20px"}
                ),
            ],
            style={
                "display": "flex",
                "flex-direction": "column",
                "align-self": "center",
                "border": "1px solid black",
                "padding": "20px",
            },
        ),
    ]


app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])


def gen_div(app, id=1):

    window_form = dbc.Row(
        [
            dbc.Col(dbc.Label("Window:"), width=2),
            dbc.Col(
                dcc.Dropdown(
                    id="window-dropdown-%d" % id,
                    options=[
                        {"label": str(w), "value": w} for w in [100, 500, 1000, 2000]
                    ],
                    value=1000,
                ),
                width=10,
            ),
        ]
    )

    true_form = dbc.Row(
        [
            dbc.Col(
                dbc.Row(
                    [
                        dbc.Col(dbc.Label("True:"), width=2),
                        dbc.Col(
                            dcc.Dropdown(
                                id="true-dropdown-%d" % id,
                                options=[
                                    {"label": "Pcap label", "value": "pcap-label"},
                                    {"label": "avg(NX+NO+TXT)", "value": "avg-nx"},
                                    {
                                        "label": "avg(NX+NO+TXT)_TOP10m",
                                        "value": "avg-nx-top10m",
                                    },
                                ],
                                value="pcap-label",
                            ),
                            width=10,
                        ),
                    ]
                ),
                width=6,
            ),
            dbc.Col(
                dbc.FormGroup(
                    [
                        dbc.Label("Threshold:", html_for="true-th-%d" % id, width=2),
                        dbc.Col(
                            dbc.Input(id="true-th-%d" % id, type="number", value=0),
                            width=10,
                        ),
                    ],
                    row=True,
                ),
                width=6,
            ),
        ]
    )

    predict_form = dbc.Row(
        [
            dbc.Col(
                dbc.Row(
                    [
                        dbc.Col(dbc.Label("Predict:"), width=2),
                        dbc.Col(
                            dcc.Dropdown(
                                id="predict-dropdown-%d" % id,
                                options=[
                                    {"label": "LLR", "value": "llr"},
                                    {"label": "avg(NX+NO+TXT)", "value": "avg-nx"},
                                    {
                                        "label": "avg(NX+NO+TXT)_TOP10m",
                                        "value": "avg-nx-top10m",
                                    },
                                ],
                                value="llr",
                            ),
                            width=10,
                        ),
                    ]
                ),
                width=6,
            ),
            dbc.Col(
                dbc.FormGroup(
                    [
                        dbc.Label("Threshold:", html_for="predict-th-%d" % id, width=2),
                        dbc.Col(
                            dbc.Input(id="predict-th-%d" % id, type="number", value=0),
                            width=10,
                        ),
                    ],
                    row=True,
                ),
                width=6,
            ),
        ]
    )

    ignore_middle = dbc.FormGroup(
        [
            dbc.Label("Exclude middle:", html_for="exclude-dropdown-%d" % id, width=2),
            dbc.Col(
                dcc.Dropdown(
                    id="exclude-dropdown-%d" % id,
                    options=[
                        {"label": "None", "value": False},
                        {"label": "(0.2, 0.8)", "value": "exc-1"},
                        {"label": "(0.3, 0.7)", "value": "exc-2"},
                        {"label": "(0.4, 0.6)", "value": "exc-3"},
                    ],
                    value=False,
                ),
                width=10,
            ),
        ],
        row=True,
    )

    nn_radio = dbc.FormGroup(
        [
            dbc.Label("NN type:", html_for="nn-radio-%d" % id, width=2),
            dbc.Col(
                dbc.RadioItems(
                    id="nn-radio-%d" % id,
                    options=[
                        {
                            "label": "No suffix: abc.google.co.uk -> abc.google",
                            "value": "nosfx",
                        },
                        {
                            "label": "Domain: abc.google.co.uk -> google",
                            "value": "domain",
                        },
                    ],
                    value="nosfx",
                ),
                width=10,
            ),
        ],
        row=True,
    )

    dbc_button = dbc.Button(
                "update",
                id="button-submit-%d" % id,
                style={"font-family": "monospace", "font-size": "24px"},
            )

    bo = dbc.Row([
        dbc.Col(ignore_middle, width=5),
        dbc.Col(nn_radio, width=5),
        dbc.Col(dbc_button, width=2)
    ])

    form = dbc.FormGroup(
        [
            window_form,
            true_form,
            predict_form,
            # ignore_middle,
            # nn_radio,
            bo,
            html.Div(id="result-container-%d" % id),
        ],
        style={"padding": "20px"},
    )

    def fun_submit(n_clicks, vwindow, vtrue, vtrue_th, vpredict, vpredict_th, vexclude, vnn):
        return calc_windows(
            window=vwindow,
            true_fun=vtrue,
            pred_fun=vpredict,
            true_th=vtrue_th,
            pred_th=vpredict_th,
            exclude=vexclude,
            nn=vnn
        )

    app.callback(
        Output("result-container-%d" % id, "children"),
        [dash.dependencies.Input("button-submit-%d" % id, "n_clicks")],
        [
            dash.dependencies.State("window-dropdown-%d" % id, "value"),
            dash.dependencies.State("true-dropdown-%d" % id, "value"),
            dash.dependencies.State("true-th-%d" % id, "value"),
            dash.dependencies.State("predict-dropdown-%d" % id, "value"),
            dash.dependencies.State("predict-th-%d" % id, "value"),
            dash.dependencies.State("exclude-dropdown-%d" % id, "value"),
            dash.dependencies.State("nn-radio-%d" % id, "value"),
        ],
    )(fun_submit)

    return form


app.layout = html.Div(
    [
        html.Div(gen_div(app, 1), id="container-1", style={"width": "50%"}),
        html.Div(gen_div(app, 2), id="container-2", style={"width": "50%"}),
    ],
    style={"display": "flex", "flex-direction": "row"},
)


if __name__ == "__main__":
    app.run_server(debug=False, port=8051)
