import math
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output
from plotly.subplots import make_subplots
import sqlite3
import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go
import os


db_path = '/media/princio/ssd512/stratosphere/db_3.sqlite3'
dirs = {
    'malware': '/media/princio/ssd512/stratosphere/pcap/csv/malware/',
    'normal': '/media/princio/ssd512/stratosphere/pcap/csv/normal/'
}
pcap_dict = {'normal':{}, 'botnet':{}}
pcap_names = {'normal':{}, 'botnet':{}}

def get_type(pcapname):
    bot_path = os.path.join(dirs['malware'], pcapname)
    nor_path = os.path.join(dirs['normal'], pcapname)
    if os.path.exists(bot_path):
        type_='botnet'
        df_path = bot_path
    elif os.path.exists(nor_path):
        type_='normal'
        df_path = nor_path
    else:
        raise Exception(pcapname + ' does not exists.')
    return type_, df_path

def get_df(pcapname, reload=False):
    if reload:
        type_, df_path = get_type(pcapname)
        pcap_dict[type_][pcapname] = pd.read_csv(df_path, usecols=list(range(0,12)))
        return pcap_dict[type_][pcapname]
    
    if pcapname in pcap_dict['botnet']:
        return pcap_dict['botnet'][pcapname]
    if pcapname in pcap_dict['normal']:
        return pcap_dict['normal'][pcapname]
    
    type_, df_path = get_type(pcapname)
    pcap_dict[type_][pcapname] = pd.read_csv(df_path, usecols=[2, 3, 6, 8, 9, 10, 11])
    return pcap_dict[type_][pcapname].copy()



db = sqlite3.connect(db_path)
df_pcap = pd.read_sql('SELECT * from pcap', db)
df_app = pd.read_sql('SELECT * from pcap_queries_3', db)
db.close()


df_pcap = df_pcap.drop(columns=['s_id', 's_win', 'qry/h'])
df_pcap.set_index('id', inplace=True, drop=False)

df_app.set_index('query', inplace=True, drop=False)

print(df_pcap.shape[0])
df_pcap = df_pcap[(df_pcap['unique_norm'] > 0.01) & (df_pcap['tot'] > 500)].copy()
print(df_pcap.shape[0])

df_pcap['nosfx >.5'] = 0
for id, pcap_id in df_pcap.id.iteritems():
    df_app_pcap = df_app[df_app['pcap_id'] == pcap_id].copy()
    df_pcap.at[pcap_id, 'nosfx >.5'] = df_app_pcap[df_app_pcap['nosfx'] > 0.5].shape[0]

print(df_pcap)

def draw_pcap_scatter():
    figures = []

    df = df_pcap.copy()

    df['nx/tot'] = df.nx/df.tot
    df['no/tot'] = df.nx/df.tot
    df['ok/tot'] = df.ok/df.tot
    df['!ok/tot'] = 1- df.ok/df.tot
    df['nosfx >.5/unique'] = df['nosfx >.5']/df.unique

    if False:
        fig = px.scatter(df,
                x='nx/tot',
                y='nosfx >.5/unique', 
                color='tot', opacity=0.8,
                symbol='type', size_max=10,
                hover_data=['ok', 'tot', 'no', 'nx']
        )
        figures.append(fig)
        fig = px.scatter(df,
                x='no/tot',
                y='nosfx >.5/unique', 
                color='tot', opacity=0.8,
                symbol='type', size_max=10,# marker_symbol=['cyrcle', 'cross'],
                hover_data=['ok', 'tot', 'no', 'nx']
        )
        figures.append(fig)
        fig = px.scatter(df,
                x='no/tot',
                y='nosfx >.5/unique', 
                color='tot', opacity=0.8,
                symbol='type', size_max=10,
                hover_data=['ok', 'tot', 'no', 'nx']
        )
        figures.append(fig)

    # for th in thresholds:
    #     df_pie = df.copy()
    #     df_pie['botnet-nx'] = df['nx/tot'] > th
    #     df_pie = df_pie[['type', 'botnet-nx', 'nx/tot']].groupby(['type', 'botnet-nx']).count()
    #     df_pie = df_pie.rename(columns={'nx/tot': 'number'}).reset_index()
    #     fig = px.sunburst(df_pie,
    #             path=['type', 'botnet-nx'],
    #             values='number',
    #             color='botnet-nx',
    #             title='NX/TOT > %0.2f' % th
    #     )
    #     figures.append(fig)

    thresholds = [0.01, 0.025, 0.05, 0.1]


    #####   NOSFX/TOTAL #############################################################
    nrow = 2
    ncol = 4
    fig = make_subplots(rows=nrow, cols=ncol,
        row_heights=[300 for i in range(2)],
        row_titles=['botnet', 'normal'],
        column_titles=['th=%0.2f' % th for th in thresholds ],
        specs=[[{'type':'domain'} for j in range(ncol)] for i in range(nrow)])

    for col, th in enumerate(thresholds):
        column = 'nosfx >.5/unique'
        df_pie = df.copy()
        df_pie['prediction'] = df[column] > th
        df_pie = df_pie[['type', 'prediction', column]].groupby(['type', 'prediction']).count()
        df_pie = df_pie.rename(columns={column: 'number'}).reset_index()
        df_pie['colors'] = df_pie['prediction'].apply(lambda x: 'red' if x else 'blue')
        df_result = {
            'botnet': df_pie[df_pie.type == 'botnet'],
            'normal': df_pie[df_pie.type == 'normal']
        }
        for row, type_ in enumerate(['botnet', 'normal']):
            df__ = df_result[type_]
            fig.add_trace(go.Pie(
                    labels=df__['prediction'],
                    values=df__['number'],
                    marker_colors=df__.colors,
                    name='%s %s > %0.2f' % (type_, column, th)), 
                row+1, col+1)

    fig.update_layout(height=700, title_text=column.upper(), showlegend=False)
    figures.append(fig)
    ##############################################################################

    #####   NX TOTAL #####################################################
    nrow = 2
    ncol = 4
    fig = make_subplots(rows=nrow, cols=ncol,
        row_heights=[300 for i in range(2)],
        row_titles=['botnet', 'normal'],
        column_titles=['th=%0.2f' % th for th in thresholds ],
        specs=[[{'type':'domain'} for j in range(ncol)] for i in range(nrow)])

    for col, th in enumerate(thresholds):
        column = 'nx/tot'
        df_pie = df.copy()
        df_pie['prediction'] = df[column] > th
        df_pie = df_pie[['type', 'prediction', column]].groupby(['type', 'prediction']).count()
        df_pie = df_pie.rename(columns={column: 'number'}).reset_index()
        df_pie['colors'] = df_pie['prediction'].apply(lambda x: 'red' if x else 'blue')
        df_result = {
            'botnet': df_pie[df_pie.type == 'botnet'],
            'normal': df_pie[df_pie.type == 'normal']
        }
        for row, type_ in enumerate(['botnet', 'normal']):
            df__ = df_result[type_]
            fig.add_trace(go.Pie(
                    labels=df__['prediction'],
                    values=df__['number'],
                    marker_colors=df__.colors,
                    name='%s %s > %0.2f' % (type_, column, th)), 
                row+1, col+1)

    fig.update_layout(height=700, title_text=column.upper(), showlegend=False)
    figures.append(fig)
    ##############################################################################


    #####   NO TOTAL #############################################################
    nrow = 2
    ncol = 4
    fig = make_subplots(rows=nrow, cols=ncol,
        row_heights=[300 for i in range(2)],
        row_titles=['botnet', 'normal'],
        column_titles=['th=%0.2f' % th for th in thresholds ],
        specs=[[{'type':'domain'} for j in range(ncol)] for i in range(nrow)])

    for col, th in enumerate(thresholds):
        column = 'no/tot'
        df_pie = df.copy()
        df_pie['prediction'] = df[column] > th
        df_pie = df_pie[['type', 'prediction', column]].groupby(['type', 'prediction']).count()
        df_pie = df_pie.rename(columns={column: 'number'}).reset_index()
        df_pie['colors'] = df_pie['prediction'].apply(lambda x: 'red' if x else 'blue')
        df_result = {
            'botnet': df_pie[df_pie.type == 'botnet'],
            'normal': df_pie[df_pie.type == 'normal']
        }
        for row, type_ in enumerate(['botnet', 'normal']):
            df__ = df_result[type_]
            fig.add_trace(go.Pie(
                    labels=df__['prediction'],
                    values=df__['number'],
                    marker_colors=df__.colors,
                    name='%s %s > %0.2f' % (type_, column, th)), 
                row+1, col+1)

    fig.update_layout(height=700, title_text=column.upper(), showlegend=False)
    figures.append(fig)
    ##############################################################################


    #####   1 - OK/TOTAL #############################################################
    nrow = 2
    ncol = 4
    fig = make_subplots(rows=nrow, cols=ncol,
        row_heights=[300 for i in range(2)],
        row_titles=['botnet', 'normal'],
        column_titles=['th=%0.2f' % th for th in thresholds ],
        specs=[[{'type':'domain'} for j in range(ncol)] for i in range(nrow)])

    for col, th in enumerate(thresholds):
        column = '!ok/tot'
        df_pie = df.copy()
        df_pie['prediction'] = df[column] > th
        df_pie = df_pie[['type', 'prediction', column]].groupby(['type', 'prediction']).count()
        df_pie = df_pie.rename(columns={column: 'number'}).reset_index()
        df_pie['colors'] = df_pie['prediction'].apply(lambda x: 'red' if x else 'blue')
        df_result = {
            'botnet': df_pie[df_pie.type == 'botnet'],
            'normal': df_pie[df_pie.type == 'normal']
        }
        for row, type_ in enumerate(['botnet', 'normal']):
            df__ = df_result[type_]
            fig.add_trace(go.Pie(
                    labels=df__['prediction'],
                    values=df__['number'],
                    marker_colors=df__.colors,
                    name='%s %s > %0.2f' % (type_, column, th)), 
                row+1, col+1)

    fig.update_layout(height=700, title_text=column.upper(), showlegend=False)
    figures.append(fig)
    ##############################################################################

    return [ dcc.Graph(figure=fig) for fig in figures ]

app = dash.Dash(__name__)

app.layout = html.Div([
        html.Div(
            draw_pcap_scatter(),
            id='pcap-container'),
])

if __name__ == '__main__':
    app.run_server(debug=False)
