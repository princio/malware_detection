import math
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output, State
from plotly.subplots import make_subplots
import dash_bootstrap_components as dbc

import psycopg2
import psycopg2.extras
import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go
import os
from sklearn.metrics import classification_report, confusion_matrix
import plotly.figure_factory as ff


db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

# pcap_list = [
#     ["27_2017_04_30-normal.pcap", 858],
#     ["32_2017-05-02_normal.pcap", 859],
#     ["29_2017-05-01_normal.pcap", 872],
#     ["30_2017-05-01_normal.pcap", 873],
#     ["31_2017-05-01_normal.pcap", 874],
#     ["10_2013-08-20_capture-win10.pcap", 80],
#     ["303-1_2017-08-12_capture-win2.pcap", 106],
#     ["5_2013-08-20_capture-win14.pcap", 845],
#     ["7_2013-08-20_capture-win1.pcap", 846],
#     ["10_2013-08-20_capture-win9.pcap", 847],
#     ["25-2_2014-01-25_capture_win3.pcap", 848],
#     ["6_2013-08-20_capture-win6.pcap", 849],
#     ["6_2013-08-20_capture-win11.pcap", 850],
#     ["10_2013-08-20_capture-win7.original.pcap", 851],
#     ["10_2013-08-20_capture-win7.pcap", 852],
#     ["110-6_2015-06-07_capture-win9.pcap", 853],
#     ["69_2014-04-07_capture-win17.pcap", 854],
#     ["71_2014-04-07_capture-win19.fixed.pcap", 855],
#     ["25-6_2014-12-20_capture-win3.pcap", 856],
#     ["170-1_capture-win6.pcap", 857]
# ]

manual_values = {
    "null": ("dark", -5),
    "legit": ("success", 0),
    "malware": ("danger", 1),
    "ad-related": ("warning", 2),
    "undef": ("light", 3),
    "unknown": ("secondary", 4),
}

cur = db.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
cur.execute("SELECT * FROM malware")
malwares = cur.fetchall()



def get_df(mws=None, manuals=None, mw_num="any", top10m=False, unique2k8k=True):

    cluases = []
    if manuals and len(manuals) != len(manual_values):
        cluases.append(
            "manual=any('{%s}')" % ",".join([str(manual) for manual in manuals])
        )

    if mws and len(mws) != len(malwares):
        for mw in mws:
            cluases.append("%d=any(malwares)" % mw)

    where_clause = "WHERE top10m is %s null" % ("not" if top10m else "")
    if len(cluases) > 0:
        where_clause = " " + " AND ".join(cluases)

    if mw_num != "any":
        where_clause += " AND array_length(malwares, 1) = %d" % (
            int(mw_num),
        )

    df = pd.read_sql(
        "SELECT * FROM public.dn_app %s;" % where_clause,
        db,
    )

    print("SELECT * FROM public.dn_app %s;" % where_clause)

    df.infected_pcap = df.infected_pcap.apply(
        lambda x: ",".join(map(str, x)) if x else None
    )
    df.normal_pcap = df.normal_pcap.apply(
        lambda x: ",".join(map(str, x)) if x else None
    )
    df.malwares = df.malwares.apply(lambda x: ",".join(map(str, x)))
    df.top10m = df.top10m.astype(object).apply(lambda x: x if x else -1)
    df.insert(9, "!rcode/tot", (df.apps - df["rcode=0"]) / df.apps)

    df.manual = df.manual.fillna(-5).astype(int)

    df["!rcode/tot"] = df["!rcode/tot"].round(4)

    df = df.rename(columns={
        "qcode=1": "A",
        "qcode=TXT": "TXT",
        "rcode<>0 AND rcode<>3": "rc=oth"
    })

    df.drop(columns=["rcode=0/qcode=1", "rcode=3/qcode=1"], inplace=True)

    return df



def gen_table(mws=None, manuals=None, mw_num="any", top10m=False, unique2k8k=True):

    df = get_df(mws, manuals, mw_num, top10m, unique2k8k)

    data_table = dash_table.DataTable(
        id="datatable_app",
        columns=[{"name": i, "id": i} for i in df.columns],
        data=df.to_dict("records"),
        # style_cell={
        #     "overflow": "hidden",
        #     "textOverflow": "ellipsis",
        #     "maxWidth": 150,
        # },
        # tooltip_data=[
        #     {
        #         column: {"value": str(value), "type": "markdown"}
        #         for column, value in row.items()
        #     }
        #     for row in df[["dn", "bdn", "infected_pcap", "normal_pcap"]].to_dict(
        #         "records"
        #     )
        # ],
        tooltip_delay=0,
        tooltip_duration=None,
        filter_action="native",
        style_data_conditional=[
            {
                "if": {"filter_query": "{manual} = 1"},
                "backgroundColor": "lightCoral",
                "color": "white",
            },
            {
                "if": {
                    "filter_query": "{rcode<>0/tot} > 0.5",
                    "column_id": "rcode<>0/tot",
                },
                "backgroundColor": "red",
                "color": "white",
                "fontWeight": "bold",
            },
            {
                "if": {
                    "filter_query": "{rcode<>0/tot} < 0.5",
                    "column_id": "rcode<>0/tot",
                },
                "backgroundColor": "lightGreen",
                "color": "white",
                "fontWeight": "bold",
            },
        ],
    )

    return data_table


app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])


def gen_update_btn():

    buttons = []

    for name in manual_values:
        dbc_button = dbc.Button(
            name,
            color=manual_values[name][0],
            id="button-%s" % name,
            style={"font-family": "monospace", "font-size": "24px"},
        )
        buttons.append(dbc_button)

    return buttons


def gen_filter_bar():

    checkbox_malware = dbc.FormGroup(
        [
            dbc.Label("Malware", html_for="checkbox-malware", width=2),
            dbc.Col(
                dbc.Checklist(
                    id="checkbox-malware",
                    options=[
                        {"label": str(malware["id"]), "value": malware["id"]}
                        for malware in malwares
                    ],
                    inline=True,
                    value=[malware["id"] for malware in malwares],
                ),
                width=10,
            ),
        ],
        row=True,
    )

    checkbox_manual = dbc.FormGroup(
        [
            dbc.Label("Manual", html_for="checkbox-manual", width=2),
            dbc.Col(
                dbc.Checklist(
                    id="checkbox-manual",
                    options=[
                        {"label": str(name), "value": manual_values[name][1]}
                        for name in manual_values
                    ],
                    inline=True,
                    value=[manual_values[name][1] for name in manual_values],
                ),
                width=10,
            ),
        ],
        row=True,
    )

    checkbox_unique2k8k = dbc.FormGroup(
        [
            dbc.Label("Unique [2k, 8k]", html_for="radio-unique2k9k", width=2),
            dbc.Col(
                dbc.RadioItems(
                    id="radio-unique2k9k",
                    options=[{"label": n, "value": n} for n in ["YES", "NO"]],
                    inline=True,
                    value="YES",
                ),
                width=10,
            ),
        ],
        row=True,
    )

    checkbox_top10m = dbc.FormGroup(
        [
            dbc.Label("Top10m", html_for="radio-top10m", width=2),
            dbc.Col(
                dbc.RadioItems(
                    id="radio-top10m",
                    options=[{"label": str(n), "value": n} for n in [True, False]],
                    inline=True,
                    value=True,
                ),
                width=10,
            ),
        ],
        row=True,
    )

    checkbox_mw_num = dbc.FormGroup(
        [
            dbc.Label("Malware Num", html_for="radio-mw-num", width=2),
            dbc.Col(
                dbc.RadioItems(
                    id="radio-mw-num",
                    options=[
                        {"label": str(n), "value": n} for n in [1, 2, 3, 0, "any"]
                    ],
                    inline=True,
                    value="any",
                ),
                width=10,
            ),
        ],
        row=True,
    )

    dbc_button = dbc.Button(
        "Filter",
        id="button-filter",
        style={"font-family": "monospace", "font-size": "24px"},
    )

    inputs = [
        checkbox_top10m,
        checkbox_malware,
        checkbox_manual,
        checkbox_mw_num,
        dbc_button,
    ]

    return inputs


table = gen_table(mws=None, manuals=None)

app.layout = html.Div(
    [
        html.Div(gen_update_btn(), id="div-update"),
        html.Div(gen_filter_bar(), id="div-filter"),
        html.Div([table], id="div-table"),
    ],
    style={"display": "flex", "flex-direction": "column"},
)


def fun_submit(
    n_clicks_null,
    n_clicks_legit,
    n_clicks_malware,
    n_clicks_ad_related,
    n_clicks_undef,
    n_clicks_unknown,
    n_clicks_filter,
    rows,
    columns,
    selected_cells,
    mws,
    manuals,
    mw_num,
    top10m,
    # unique2k8k,
):
    print("fun_submit", [p["prop_id"] for p in dash.callback_context.triggered][0])

    button_name = (
        [p["prop_id"] for p in dash.callback_context.triggered][0]
        .split(".")[0]
        .replace("button-", "")
    )

    if button_name == "filter":
        return get_df(
            mws=mws,
            manuals=manuals,
            mw_num=mw_num,
            top10m=top10m,
            unique2k8k=None,
        ).to_dict('records')

    if selected_cells is None:
        return rows

    manual = manual_values[button_name]

    if selected_cells is not None:
        dn_ids = [s["row_id"] for s in selected_cells]
        for s in selected_cells:
            rows[s["row"]]["manual"] = manual[1]

    cur = db.cursor()

    cur.execute(
        "UPDATE dn SET manual=%s WHERE id = ANY(%s)",
        (manual[1], dn_ids),
    )

    db.commit()

    return rows

print([Input("button-%s" % name, "n_clicks") for name in manual_values]
    + [dash.dependencies.Input("button-filter", "n_clicks")])

app.callback(
    Output("datatable_app", "data"),
    [Input("button-%s" % name, "n_clicks") for name in manual_values]
    + [dash.dependencies.Input("button-filter", "n_clicks")],
    [
        State("datatable_app", "data"),
        State("datatable_app", "columns"),
        State("datatable_app", "selected_cells"),
        dash.dependencies.State("checkbox-malware", "value"),
        dash.dependencies.State("checkbox-manual", "value"),
        dash.dependencies.State("radio-mw-num", "value"),
        dash.dependencies.State("radio-top10m", "value"),
        # dash.dependencies.State("radio-unique2k8k", "value"),
    ],
)(fun_submit)


if __name__ == "__main__":
    app.run_server(debug=True, port=8051)
