
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output
from plotly.subplots import make_subplots
import sqlite3
import pandas as pd
import plotly.express as px
import numpy as np


db_path = '/media/princio/ssd512/stratosphere/db_3.sqlite3'
dirs = {
    'malware': '/media/princio/ssd512/stratosphere/pcap/csv/malware/',
    'normal': '/media/princio/ssd512/stratosphere/pcap/csv/normal/'
}

db = sqlite3.connect(db_path)
df_pcaps = pd.read_sql('SELECT * from pcap', db)
db.close()
df_pcaps = df_pcaps.drop(columns=['s_id', 's_win'])
df_pcaps.set_index('id', inplace=True, drop=False)

app = dash.Dash(__name__)

app.layout = html.Div([
        html.Div([
            dash_table.DataTable(
                id='left-datatable-row-ids',
                columns=[
                    {'name': i, 'id': i, 'deletable': True} for i in df_pcaps.columns if i != 'id'
                ],
                data=df_pcaps.to_dict('records'),
                editable=True,
                filter_action="native",
                sort_action="native",
                sort_mode='multi',
                row_selectable='multi',
                row_deletable=True,
                selected_rows=[],
                page_action='none',
                style_table={'height': '300px', 'overflowY': 'auto', 'overflowX': 'auto'}
            ),
            html.Div(id='left-datatable-row-ids-container')
        ],
        style={'width': '50%'}),
        html.Div([
            dash_table.DataTable(
                id='right-datatable-row-ids',
                columns=[
                    {'name': i, 'id': i, 'deletable': True} for i in df_pcaps.columns if i != 'id'
                ],
                data=df_pcaps.to_dict('records'),
                editable=True,
                filter_action="native",
                sort_action="native",
                sort_mode='multi',
                row_selectable='multi',
                row_deletable=True,
                selected_rows=[],
                page_action='none',
                style_table={'height': '300px', 'overflowY': 'auto', 'overflowX': 'auto'}
            ),
            html.Div(id='right-datatable-row-ids-container')
        ],
        style={'width': '50%'})
    ],
    style={'display': 'flex', 'flex-direction': 'row'}
)

template='seaborn'
color_scale='rainbow'

def update_graphs_logic(active_cell):
    if active_cell is None: return []
    active_row_id = active_cell['row_id']
    db = sqlite3.connect(db_path)
    df = pd.read_sql('select * from pcap_queries_2 WHERE pcap_id = %d' % active_row_id, db)
    db.close()
    df_tot = df['count'].sum()
    df['responsivity'] = df['response-ok']/df['count']
    df['responsivity_w'] = df['response-ok'] * (df['count'].div(df_tot))
    df['response-no'] = df['count'] - df['response-ok']
    df['responsivity_w'] = df['response-ok'].sub(df['response-no']).div(df['count']) #/ df_tot #* (df['count'].div(df_tot))

    df['count_log'] = pd.Series(np.log10(df['count'].values))
    figures = [
        px.scatter(df, template=template, color_continuous_scale=color_scale, x='count', y="nosfx", color='responsivity', symbol='legit_list', hover_data=['query', 'response-ok', 'count']),
        px.scatter(df, template=template, color_continuous_scale=color_scale, x='responsivity', y="nosfx", color='count', opacity=0.8, symbol='legit_list', hover_data=['query', 'response-ok', 'count']),
        px.scatter(df, template=template, color_continuous_scale=color_scale, x='responsivity_w', log_x=False, y="nosfx", opacity=0.5, color='count', size_max=30, symbol='legit_list', hover_data=['query', 'response-ok', 'count']),
    ]
    for figure in figures:
        figure.update_layout(
            coloraxis_colorbar=dict(len=100, lenmode='pixels'),
            yaxis=dict(
                range=[-0.1, 1.1],
                dtick=0.2,
                tick0=0,
                nticks=5
            )
        )
    return [ dcc.Graph(figure=figure) for figure in figures ]

@app.callback(
    Output('left-datatable-row-ids-container', 'children'),
    Input('left-datatable-row-ids', 'active_cell'))
def update_graphs(*args, **kwargs):
    return update_graphs_logic(*args, **kwargs)

@app.callback(
    Output('right-datatable-row-ids-container', 'children'),
    Input('right-datatable-row-ids', 'active_cell'))
def update_graphs(*args, **kwargs):
    return update_graphs_logic(*args, **kwargs)

if __name__ == '__main__':
    app.run_server(debug=False)
