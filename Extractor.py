from enum import Enum
import tldextract
import pandas as pd
import re



def ____________gen_enum():
    a= 'DOMAIN,DOMAIN_SFX,DOMAIN_SFX_NP,'
    a+='SUBDOMAIN,SUBDOMAIN_NP,SUBDOMAIN_SFX,SUBDOMAIN_SFX_NP,'
    a+='NOSFX,NOSFX_NP,'
    a+='WHOLE,WHOLE_NP,'
    a+='SIDE,SIDE_NP'
    a+='FIRSTSUBDOMAIN,FIRSTSUBDOMAIN_SFX,FIRSTSUBDOMAIN_SFX_NP'
    a=a.split(',')
    c=0
    for d in a:
        print(f'{d}={c}')
        c+=1

def ____________test():
    df = pd.DataFrame(['google.co.uk', 'gmail.pish.google.co.uk', 'gmail.pish.google.com', 'google', 'goo.soerfgh'], columns=['dn'])
    for t in Extractor.all():
        df[t.name] = df['dn'].apply(t.translator())
    df=df.T
    df.columns = df.loc['dn']
    print(df.drop('dn', axis=0).to_markdown())

class Extractor(Enum):
    DOMAIN = 0
    DOMAIN_SFX = 1
    DOMAIN_SFX_NP = 2
    LAST = 3
    LAST_SFX = 4
    LAST_SFX_NP = 5
    NOSFX = 6
    NOSFX_NP = 7
    ANY = 8
    ANY_NP = 9
    SUBDOMAIN = 10
    SUBDOMAIN_NP = 11
    SUBDOMAIN_SFX = 12
    SUBDOMAIN_SFX_NP = 13

    RE_SEARCHER = re.compile(r'[^.\-_a-z0-9]').search
    EXTRACTOR = tldextract.TLDExtract(extra_suffixes=['bit', 'lan'])
    
    @staticmethod
    def domain(dn):
        return Extractor.EXTRACTOR.value(dn.lower().strip()).domain

    @staticmethod
    def domain_sfx(dn):
        exd = Extractor.EXTRACTOR.value(dn.lower().strip())
        return exd.domain + '.' + exd.suffix

    @staticmethod
    def domain_sfx_np(dn):
        exd = Extractor.EXTRACTOR.value(dn.lower().strip())
        return exd.domain + exd.suffix.replace('.','')

    @staticmethod
    def last(dn):
        left = dn.find('.')
        if left == -1:
            return dn
        return dn[:dn.find('.')]

    @staticmethod
    def last_sfx(dn):
        print(dn)
        left = dn.find('.')
        if left == -1:
            return dn
        return dn[:dn.find('.')] + '.' + Extractor.EXTRACTOR.value(dn.lower().strip()).suffix

    @staticmethod
    def last_sfx_np(dn):
        left = dn.find('.')
        if left == -1:
            return dn
        return dn[:dn.find('.')] + Extractor.EXTRACTOR.value(dn.lower().strip()).suffix.replace('.','')

    @staticmethod
    def nosfx(dn):
        suffix_len = 1+len(Extractor.EXTRACTOR.value(dn.lower().strip()).suffix)
        return dn[:-1*suffix_len] if suffix_len > 0 else dn

    @staticmethod
    def nosfx_np(dn):
        suffix_len = 1+len(Extractor.EXTRACTOR.value(dn.lower().strip()).suffix)
        return (dn[:-1*suffix_len] if suffix_len > 0 else dn).replace('.','')

    @staticmethod
    def any(dn):
        return dn

    @staticmethod
    def any_np(dn):
        return dn.replace('.', '')

    @staticmethod
    def subdomain(dn):
        return Extractor.EXTRACTOR.value(dn.lower().strip()).subdomain

    @staticmethod
    def subdomain_np(dn):
        return Extractor.EXTRACTOR.value(dn.lower().strip()).subdomain.replace('.', '')

    @staticmethod
    def subdomain_sfx(dn):
        exd = Extractor.EXTRACTOR.value(dn.lower().strip())
        return '.'.join([exd.subdomain, exd.suffix]) if exd.subdomain else exd.suffix

    @staticmethod
    def subdomain_sfx_np(dn):
        exd = Extractor.EXTRACTOR.value(dn.lower().strip())
        return (exd.subdomain + exd.suffix).replace('.','')

    @staticmethod
    def suffix(dn):
        return Extractor.EXTRACTOR.value(dn.lower().strip()).suffix

    def translator(self):
        return getattr(Extractor, str(self.name).lower())

    @staticmethod
    def checker(dn, check_suffix = False):
        exd = Extractor.EXTRACTOR.value(dn)
        print(check_suffix, '<%s>' % exd.suffix)
        if exd.suffix == '':
            if check_suffix:
                return False
            print("warning: no suffix for dn |%s|" % dn)
        return dn.find('.') >= 0

    @staticmethod
    def is_dn(dn):
        if len(dn) == 0: return False
        ex = Extractor.EXTRACTOR.value(dn)
        if len(ex.subdomain) + len(ex.domain) == 0: return False
        return not bool(Extractor.RE_SEARCHER.value(dn.lower()))

    @staticmethod
    def extract(dn):
        return Extractor.EXTRACTOR.value(dn)

    @classmethod
    def all(cls):
        return [member for role, member in cls.__members__.items()]