import numpy as np
import time
import csv
from math import ceil
from DomainLevel import Transformer
from collections import OrderedDict, Counter as collection_counter
from keras.preprocessing.sequence import pad_sequences
from keras.models import model_from_json
import keras
from json import load as json_load
import os
import tensorflow as tf

class Model:
    MAXLEN=66

    def __init__(self, path, dl):
        self.path = path
        self.dl = dl
        self.nn = None

    @property
    def name(self):
        return 'model_' + self.dl.name

    def domain2input(self, domain):
        try:
            return [self.alphabet[l] for l in domain.lower().replace('.', '')]
        except:
            print('Error translating <%s>.' % domain)
            return None

    def load_model(self):
        if self.nn is not None: return
        with tf.keras.utils.custom_object_scope({'string_lower': tf.strings.lower, 'string_bytes_split': tf.strings.bytes_split}):
            self.nn = keras.models.load_model(self.path)

    def predict(self, X, batch_size = 100*1000):
        self.load_model()

        time_elapsed = time.time()
        Y = self.nn.predict(X[0:100] if os.environ.get('DEBUG') == 'True' else X, batch_size=128, verbose=1)#, steps=ceil(len(X)/32))
        time_elapsed = time.time() - time_elapsed

        return Y[:,0], time_elapsed

    def __str__(self):
        return self.path.split('/')[-1]

    @staticmethod
    def load(dl: Transformer):
        if dl == Transformer.NOTLD:
            return Model('training/model_128_69_NOTLD_3_30_binary_2/model_2_30', dl)
