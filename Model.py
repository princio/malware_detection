import numpy as np
import time
import csv
from math import ceil
from DomainLevel import DomainLevel
from collections import OrderedDict, Counter as collection_counter
from keras.preprocessing.sequence import pad_sequences
from keras.models import model_from_json
from sklearn.metrics import classification_report, confusion_matrix
from json import load as json_load


class Model:

    def __init__(self, path, dl):
        self.path = path
        self.dl = dl
        self.nn = None
        self.maxlen = None

    def load_model(self):
        if self.nn is not None: return
        with  open("%s.json" % self.path, 'r') as json_file:
            loaded_model_json = json_file.read()
        self.nn = model_from_json(loaded_model_json)
        self.nn.load_weights("%s.h5" % self.path)
        self.maxlen = self.nn.get_layer(index=0).input_shape[1]

    def predict(self, X_not_padded, batch_size = 100*1000):
        self.load_model()

        X = pad_sequences(X_not_padded, maxlen=self.maxlen, truncating='post')

        time_elapsed = time.time()
        Y = self.nn.predict(X, batch_size=128, verbose=1)#, steps=ceil(len(X)/32))
        time_elapsed = time.time() - time_elapsed

        return Y, time_elapsed


    def __str__(self):
        return self.path.split('/')[-1]

    @staticmethod
    def load(dl: DomainLevel):
        if dl == DomainLevel.LOWERT:
            return Model('models/model_binary.lowert', dl)
        if dl == DomainLevel.BOTH:
            return Model('models/model_binary.both', dl)
        if dl == DomainLevel.LOWER:
            return Model('models/model_binary.lower', dl)
