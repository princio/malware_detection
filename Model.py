import numpy as np
import time
import csv
from math import ceil
from DomainLevel import Transformer
from collections import OrderedDict, Counter as collection_counter
from keras.preprocessing.sequence import pad_sequences
from keras.models import model_from_json
import keras
from json import load as json_load
import os
import tensorflow as tf
import pandas as pd
import random

class Model:
    def __init__(self, path, name, keras_format, input_layer, vocabulary = None):
        self.path = path
        self.nn = None
        self.name = name
        self.keras_format = keras_format
        self.input_layer = input_layer 
        self.vocabulary = vocabulary

    def text_vectorization(self, dn):
        try:
            a = [self.vocabulary.index(l) for l in dn.lower().replace('.', '')]
            return a
        except:
            print('Error translating <%s>.' % dn)
            return None

    def load_model(self):
        if self.nn is not None: return
        if self.keras_format:
            with tf.keras.utils.custom_object_scope({'string_lower': tf.strings.lower, 'string_bytes_split': tf.strings.bytes_split}):
                self.nn = keras.models.load_model(self.path)
        else:
            with  open("%s.json" % self.path, 'r') as json_file:
                loaded_model_json = json_file.read()
            self.nn = model_from_json(loaded_model_json)
            self.nn.load_weights("%s.h5" % self.path)

    def predict(self, X, batch_size = 128):
        self.load_model()

        X = X if os.environ.get('DEBUG') != 'True' else X[0:100]

        if self.input_layer is False:
            X = [self.text_vectorization(x) for x in X]
            X = pad_sequences(X, maxlen=self.nn.get_layer(index=0).input_shape[1], truncating='post')

        time_elapsed = time.time()
        Y = self.nn.predict(X, batch_size=128, verbose=1)#, steps=ceil(len(X)/32))
        time_elapsed = time.time() - time_elapsed

        return Y[:,0], time_elapsed

    def __str__(self):
        return self.path.split('/')[-1]

    @staticmethod
    def load(id):
        if id < 0:
            vocabulary = ['', '_', '-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
            if id == -1: #LOWERT
                return Model('models/model_binary.lowert', 'OLD_LAST_SFX', False, False, vocabulary=vocabulary)
            if id == -2: #BOTH
                return Model('models/model_binary.both', 'OLD_NOSFX_NP', False, False, vocabulary=vocabulary)
            if id == -3: #LOWER
                return Model('models/model_binary.lower', 'OLD_LAST', False, False, vocabulary=vocabulary)
        if id == 1:
            return Model('models/model_128_69_NOTLD_1_30_binary_0/model_26', 'NOSFX_1-30', True, True)
        if id == 2:
            return Model('models/model_128_69_NOTLD_NOPUNCT_1_30_binary_1/model_21', 'NOSFX_NOPUNCT_1-30', True, True)
