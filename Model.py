import numpy as np
from collections import OrderedDict, Counter as collection_counter
from keras.preprocessing import sequence
import time
from keras.models import model_from_json, Sequential
from sklearn.metrics import classification_report, confusion_matrix
from json import load as json_load
import csv
from math import ceil
from DomainLevel import DomainLevel
import tldextract


class Model:

    def __init__(self, path, name):
        self.path = path
        self.name = name
        self.nn: Sequential = None
        self.maxlen = None

    def load_model(self):
        if self.nn is not None: return
        with  open("%s.json" % self.path, 'r') as json_file:
            loaded_model_json = json_file.read()
        self.nn = model_from_json(loaded_model_json)
        self.nn.load_weights("%s.h5" % self.path)
        self.maxlen = self.nn.get_layer(index=0).input_shape[1]

    def predict(self, X_not_padded, batch_size = 100*1000):
        self.load_model()

        X = sequence.pad_sequences(X_not_padded, maxlen=self.maxlen, truncating='post')

        time_elapsed = time.time()
        Y = self.nn.predict(X, steps=ceil(len(X)/batch_size))
        time_elapsed = time.time() - time_elapsed

        return Y, time_elapsed


    def __str__(self):
        return self.path.split('/')[-1]

    @staticmethod
    def from_name(name):
        if name.lower() == 'side':
            return Model('models/model_TOP_1_29_binary', 'TOP_1.29')
        if name.lower() == 'top':
            return Model('models/model_SIDE_1_19_binary', 'SIDE_1.19')
        raise f'Model with name {name} not exists'
