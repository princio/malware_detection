import time, csv, re, os, random
from collections import OrderedDict, Counter as collection_counter
from json import load as json_load
from math import ceil
import numpy as np, pandas as pd
from keras.preprocessing.sequence import pad_sequences
from keras.models import model_from_json
import keras
import tensorflow as tf
from DomainLevel import Transformer

class Model:
    def __init__(self, path, name, tr, with_preproc_layer):
        self.path = path
        self.nn = None
        self.name = name
        self.tr = tr
        self.with_preproc_layer = with_preproc_layer 
        self.vocabulary = ['', '_', '-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
        

    def text_vectorization(self, dn):
        try:
            a = [self.vocabulary.index(l) for l in dn.lower().replace('.', '')]
            return a
        except:
            raise Exception('Error translating ///%s///' % dn)

    def load_model(self):
        if self.nn is not None: return
        if self.with_preproc_layer:
            with tf.keras.utils.custom_object_scope({'string_lower': tf.strings.lower, 'string_bytes_split': tf.strings.bytes_split}):
                self.nn = keras.models.load_model(self.path)
        else:
            with  open("%s.json" % self.path, 'r') as json_file:
                loaded_model_json = json_file.read()
            self.nn = model_from_json(loaded_model_json)
            self.nn.load_weights("%s.h5" % self.path)

    def predict_u(self, DNs, batch_size = 128, return_X=False, return_DN=False):
        self.load_model()

        if not type(DNs) == 'pandas.core.series.Series':
            DNs = pd.Series(DNs)

        DNs = DNs.rename('DN')
        DNs_tot = DNs.copy()

        DNs_unique = DNs.drop_duplicates()
        DNs_unique = pd.DataFrame({'tr': DNs_unique.apply(self.tr.translator()), 'DN': DNs_unique})
        DNs_unique_tr_unique = DNs_unique['tr'].drop_duplicates()

        if not self.with_preproc_layer:
            X = DNs_unique_tr_unique.apply(self.text_vectorization)
            X = pad_sequences(X.values, maxlen=self.nn.get_layer(index=0).input_shape[1], truncating='post')
        else:
            X = DNs_unique_tr_unique.values

        time_elapsed = time.time()
        Y = self.nn.predict(X, batch_size=128, verbose=1)#, steps=ceil(len(X)/32))
        time_elapsed = time.time() - time_elapsed
        
        df_Y = pd.DataFrame({'tr': DNs_unique_tr_unique.values, 'Y': Y[:,0]})
        df_Y = df_Y.merge(DNs_unique, on='tr')
        df_Y = DNs_tot.to_frame().merge(df_Y, on='DN').drop(columns='tr')

        if return_X:
            X = np.apply_along_axis(lambda x: ';'.join([str(c) for c in x]).replace('0;',''), 1, X)
            df_X = pd.DataFrame({'X': X}, index=DNs)
            df_X = DNs_tot.to_frame().join(df_X, on='DN')
            return df_Y if return_DN else df_Y['Y'], time_elapsed, df_X['X']
        else:
            return df_Y if return_DN else df_Y['Y'], time_elapsed

    def predict(self, DNs, batch_size = 128, return_X=False, return_DN=False):
        self.load_model()

        if not type(DNs) == 'pandas.core.series.Series':
            DNs = pd.Series(DNs)

        DNs_wrong = DNs.apply(check_domain)
        DNs[DNs_wrong == 1] = 'skipped'

        DNs = DNs if os.environ.get('DEBUG') != 'True' else DNs.iloc[0:100]

        if not self.with_preproc_layer:
            X = DNs.apply(self.text_vectorization)
            X = pad_sequences(X.values, maxlen=self.nn.get_layer(index=0).input_shape[1], truncating='post')
        else:
            X = DNs.values

        time_elapsed = time.time()
        Y = self.nn.predict(X, batch_size=128, verbose=1)#, steps=ceil(len(X)/32))
        time_elapsed = time.time() - time_elapsed

        Y = pd.Series(Y[:,0], name='Y')
        Y[DNs_wrong == 1] = 0
        df_Y = pd.DataFrame({'Y': Y[:, 0]}, index=DNs)

        if return_X:
            X = np.apply_along_axis(lambda x: ';'.join([str(c) for c in x]).replace('0;',''), 1, X)
            df_X = pd.DataFrame({'X': X}, index=DNs.index)
            return df_Y if return_DN else df_Y['Y'], time_elapsed, df_X['X']
        else:
            return df_Y if return_DN else df_Y['Y'], time_elapsed


    def __str__(self):
        return self.path.split('/')[-1]

    @staticmethod
    def load(id):
        if id == 'last': #AST
            return Model('models/model_binary.lower', 'last',  Transformer.DOMAIN, with_preproc_layer=False)
        if id == 'nosfx':
            return Model('models/model_128_69_NOTLD_1_30_binary_0/model_26', 'nosfx',  Transformer.NOSFX, with_preproc_layer=True)
        if id == 'domain':
            return Model('models/model_128_63_DOMAIN_1_30_binary_0/model_24', 'DOMAIN',  Transformer.DOMAIN, with_preproc_layer=True)
        return None
