import pandas as pd
from IOview import InputView, OutputView

def is_right(x):
    distance = abs((0 if x['label'] == 'legit' else 1) - x['probability'])
    rightness = 1 if (x['label'] == 'legit' and x['probability'] < 0.5) or (x['label'] == 'dga' and x['probability'] > 0.5) else 0
    return rightness, distance

def normalcapture_wrongness(x):
    rightness = 1 if x > 0.5 else 0
    distance = 0 if x <= 0.5 else x-0.5
    return rightness, distance

class Comparer:

    def __init__(self, capture, models: [], dls: []):
        self.capture = capture
        self.input_vs = []
        self.outputvs = []
        self.dls = dls
        self.models = models
        for dl in dls:
            input_v = InputView(capture, dl)
            self.input_vs.append(input_v)
            for model in models:
                self.outputvs.append(OutputView(input_v, model))
        
        pass

    def dn_x_other(self):
        return [outputv.dn for outputv in self.outputvs]

    def input_x_model(self):
        inputs = [pd.concat([self.outputvs[i].input, self.outputvs[i+1].input], keys=[self.outputvs[i].model.name, self.outputvs[i+1].model.name], axis=1) for i in range(0, len(self.outputvs), 2)]
        return inputs

    # def path(self, append = '', ext = 'csv'):
    #     if not os.path.exists(f'predictions/{self.capture.name}'):
    #         os.makedirs(f'predictions/{self.capture.name}')
    #     return 'views/%s/%s.multi%s%s.%s' % (self.capture.name, self.capture.name, '.' if append != '' else '', append, ext)
    def df(self):
        """
        tld | count | average
        """
        dns = [outputv.whole for outputv in self.outputvs]
        return pd.concat(dns).sort_index()
    
    def dn(self):
        """
        tld | count | average
        """
        dns = self.dn_x_other()
        keys = [outputv.inputv.dl.name for outputv in self.outputvs]
        models = [outputv.model.name for outputv in self.outputvs]
        return pd.concat(dns, names=['dl', 'model', 'bo'], keys=list(zip(keys, models)), axis=1)
    
    def input(self):
        """
        tld | count | average
        """
        inputs = self.input_x_model()
        df = pd.concat(inputs, axis=0)
        df = df.sort_index()
        print(df)
        return df

    def dga(self):
        """
        tld | count | average
        """
        df = None
        for outputv in self.outputvs:
            o = outputv.dga
            o.columns = pd.MultiIndex.from_tuples([(outputv.inputv.dl.name, outputv.model.name, a) for a in o.columns])
            o = o.drop_duplicates()
            if df is None:
                df = o
            else:
                df = df.join(o, how='outer')
        return df.fillna(0)


    def legit(self):
        """
        tld | count | average
        """
        dns = self.dn_x_other()
        keys = [outputv.inputv.dl.name for outputv in self.outputvs]
        models = [outputv.model.name for outputv in self.outputvs]
        return pd.concat(dns, names=['dl', 'model', 'bo'], keys=list(zip(keys, models)), axis=1)

    def tld(self):
        """
        tld | count | average
        """
        tlds = [outputv.tld for outputv in self.outputvs]
        keys = [outputv.inputv.dl.name for outputv in self.outputvs]
        models = [outputv.model.name for outputv in self.outputvs]
        return pd.concat(tlds, names=['dl', 'model', 'agg'], keys=list(zip(keys, models)), axis=1)