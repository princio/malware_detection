import math
import numpy as np

def plot_num(plt, predictions, frame_detection_number = None, deltas = None):
    len__ = len(predictions)
    if deltas is None:
        last_delta = math.ceil(0.2*len__) if frame_detection_number is None else frame_detection_number
        deltas = [math.ceil(0.07*len__), math.ceil(0.1*len__), last_delta]

    _fig, axs = plt.subplots(2, len(deltas))  # Create a figure and an axes.

    good_binary = {}
    bad_binary = {}
    good_float = {}
    bad_float = {}
    for idx, delta in enumerate(deltas):
        slices_number = math.ceil(len__/delta)

        good_binary[delta] = np.zeros(slices_number*2)
        bad_binary[delta] = np.zeros(slices_number*2)
        good_float[delta] = np.zeros(slices_number*2)
        bad_float[delta] = np.zeros(slices_number*2)

        x = np.zeros(slices_number*2)

        for z in range(0, slices_number):
            l = (z+1)*delta if (z+1)*delta < len__ else len__
            for i in range(z*delta, l):
                zz = z*2
                if predictions[i] > 0.5:
                    bad_binary[delta][zz] += 1
                    bad_float[delta][zz] += predictions[i] - 0.5
                else:
                    good_binary[delta][zz] += 1
                    good_float[delta][zz] += 0.5 - predictions[i]

            x[zz] = z*delta
            x[zz+1] = l-1
            bad_binary[delta][zz+1] = bad_binary[delta][zz]
            bad_float[delta][zz+1] = bad_float[delta][zz]
            good_binary[delta][zz+1] = good_binary[delta][zz]
            good_float[delta][zz+1] = good_float[delta][zz]

        axs[0, idx].plot(x, good_binary[delta], label=f'good_float')
        axs[0, idx].plot(x, bad_binary[delta], label=f'bad_float')
        axs[0, idx].set_title(f'binary prediction sum with delta={delta}')
        axs[0, idx].legend()

        axs[1, idx].plot(x, good_float[delta], label=f'good_float')
        axs[1, idx].plot(x, bad_float[delta], label=f'bad_float')
        axs[1, idx].set_title(f'float prediction with delta={delta}')
        axs[1, idx].legend()

        if frame_detection_number is None:
            axs[0, idx].axvline(x=frame_detection_number, color='red')
            axs[1, idx].axvline(x=frame_detection_number, color='red')