from Pcap import Pcap
from Model import Model
from DomainLevel import DomainLevel
import os
import Paths
import csv, numpy as np


def predict_pcap_csv(model, pcap, dn_level: DomainLevel):

    print('Predicting with model `%s` pcap `%s` taking the %s-levels of dns...' % (model['name'], pcap['name'], dn_level.name))

    out_csv = '%s_%s_%s.out.csv' % (pcap['path'], model['name'], dn_level.name)
    if not os.path.exists(out_csv):
        model = Model(model['path'])
        p, _, _ = model.predict_csv(csv_in_path=pcap['path'], csv_out_path=out_csv, column=pcap['column'], dn_level=dn_level)
        print('Predicted successfuly, csv-out: %s' % out_csv)
    else:
        print('Already predicted, csv-out: %s' % out_csv)
        with open(out_csv, 'r') as f:
            data = [float(row[2]) for row in csv.reader(f)]
            p = np.asarray(data)
    return p

if __name__ == "__main__":
    model = Paths.model_side
    pcap = Paths.mixed['1']
    predict_pcap_csv(model, pcap, DomainLevel.SUB_TLD)
    pass