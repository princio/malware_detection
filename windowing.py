import psycopg2
from psycopg2.extras import execute_values
import pandas as pd
import numpy as np
import os

db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

def f_llr(s_nosfx):
    num = s_nosfx.replace(
        [0, 1], [0.000_000_000_000_000_1, 1 - 0.000_000_000_000_000_1]
    )
    den = np.ones(len(num)) - num
    llr = np.log(num / den)
    return llr

df_pcap = pd.read_sql(
    'SELECT id, "name", "malware_id", "infected", "qr", q, r, "unique", days FROM pcap ORDER BY name',
    db,
)

windows = [3000, 4000, 5000, 7500, 10000]#[100, 500, 1000, 2000]

for idx, pcap in df_pcap.iterrows():

    query = (
        "SELECT * FROM qr_grouped_view WHERE pcap_id=%d ORDER BY q_time" % pcap["id"]
    )
    df = pd.read_sql(query, db)

    df["app"] = 1
    df["ok"] = df.rcode.apply(lambda x: 1 if x == 0 else 0)
    df["nx"] = df.rcode.apply(lambda x: 1 if x == 3 else 0)
    df["no"] = df.rcode.fillna(value=-1).apply(lambda x: 1 if x == -1 else 0)
    df["txt"] = df.qcode.apply(lambda x: 1 if x == 16 else 0)
    df["top10m"] = (
        df["top10m"].astype(np.single).fillna(500_001).apply(lambda x: x < 500_000)
    )
    df = df.rename(columns={"top10m": "top500k"})

    f_l = lambda x: 1 if (x[0] == 1) and np.isnan(x[1]) else 0
    df["ok_top500k"] = df[["ok", "top500k"]].apply(f_l, axis=1)
    df["nx_top500k"] = df[["nx", "top500k"]].apply(f_l, axis=1)
    df["no_top500k"] = df[["no", "top500k"]].apply(f_l, axis=1)
    df["txt_top500k"] = df[["txt", "top500k"]].apply(f_l, axis=1)

    sum_cols = [
        "llr",
        "app",
        "ok",
        "nx",
        "no",
        "txt",
        "ok_top500k",
        "nx_top500k",
        "no_top500k",
        "txt_top500k",
    ]
    aggs = {c: "sum" for c in sum_cols}
    aggs["dn"] = "nunique"

    cur = db.cursor()

    for window in windows:
        df__ = df.copy()
        df__["llr"] = f_llr(df__["nosfx"])
        df__["window"] = df__.index // window
        df__ = (
            df__[["dn", "window"] + sum_cols]
            .groupby("window")
            .agg(aggs)
            .reset_index()
            .rename(columns={"dn": "unique"})
        )
        df__["pcap_id"] = pcap["id"]
        df__["size"] = window

        fields = [
            "pcap_id",
            "size",
            "window",
            "llr",
            "app",
            "unique",
            "ok",
            "nx",
            "no",
            "txt",
            "ok_top500k",
            "nx_top500k",
            "no_top500k",
            "txt_top500k",
        ]

        execute_values(
            cur,
            """INSERT INTO public."window"(pcap_id, "size", "window", llr, app, "unique", ok, nx, no, txt, ok_top500k, nx_top500k, no_top500k, txt_top500k)
            VALUES %s;""",
            df__[fields].to_numpy().tolist(),
        )

    db.commit()
