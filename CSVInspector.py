
import numpy as np
import csv
import tldextract
from DomainLevel import DomainLevel
from DataHandler import DataOut

class Inspector:
    def __init__(self):
        self.csv_path = ''
        self.column = None
        self.data = None


    def set_data(self, data_out: DataOut, csv_path = '/tmp/generic_inspector.csv', column = 2):
        self.csv_path = csv_path
        self.column = column
        self.data = data
        pass


    def set_data_csv(self, model, csv_path, column=2):
        self.csv_path = csv_path
        self.column = column
        with open (self.csv_path, 'r') as f:
            data = [self.parse_row(row) for row in csv.reader(f)]
        self.data = DataOut(self.data, )
        pass

    def parse_row(self, row):
        row[self.column] = float(row[self.column])
        return row

    def group_domains(self):
        if self.data is None:
            raise 'Set data first'
        
        dl = self.data.dl
        domains_grouped = {}
        for d in self.data.data_out:
            dd = data.dl.translate(d[DataOut.DOMAIN])
            if dd not in domains_grouped:
                domains_grouped[dd] = [dd, 0, 1]
            else:
                domains_grouped[dd][1] += float(d[self.column])
                domains_grouped[dd][2] += 1

        with open(self.csv_path[:-4] + f'.grouped_{dl.name}.csv', 'w', newline='\n') as f:
            writer = csv.writer(f)
            writer.writerows([[domains_grouped[d][0], domains_grouped[d][1]/domains_grouped[d][2], domains_grouped[d][2]] for d in domains_grouped])

        return domains_grouped
