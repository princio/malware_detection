import math
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output, State
from plotly.subplots import make_subplots
import dash_bootstrap_components as dbc

import psycopg2
import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go
import os
from sklearn.metrics import classification_report, confusion_matrix
import plotly.figure_factory as ff


db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

# pcap_list = [
#     ["27_2017_04_30-normal.pcap", 858],
#     ["32_2017-05-02_normal.pcap", 859],
#     ["29_2017-05-01_normal.pcap", 872],
#     ["30_2017-05-01_normal.pcap", 873],
#     ["31_2017-05-01_normal.pcap", 874],
#     ["10_2013-08-20_capture-win10.pcap", 80],
#     ["303-1_2017-08-12_capture-win2.pcap", 106],
#     ["5_2013-08-20_capture-win14.pcap", 845],
#     ["7_2013-08-20_capture-win1.pcap", 846],
#     ["10_2013-08-20_capture-win9.pcap", 847],
#     ["25-2_2014-01-25_capture_win3.pcap", 848],
#     ["6_2013-08-20_capture-win6.pcap", 849],
#     ["6_2013-08-20_capture-win11.pcap", 850],
#     ["10_2013-08-20_capture-win7.original.pcap", 851],
#     ["10_2013-08-20_capture-win7.pcap", 852],
#     ["110-6_2015-06-07_capture-win9.pcap", 853],
#     ["69_2014-04-07_capture-win17.pcap", 854],
#     ["71_2014-04-07_capture-win19.fixed.pcap", 855],
#     ["25-6_2014-12-20_capture-win3.pcap", 856],
#     ["170-1_capture-win6.pcap", 857]
# ]

manual_values = {
    "null": ("dark", -1),
    "legit": ("success", 0),
    "malware": ("danger", 1),
    "ad-related": ("warning", 2),
    "undef": ("light", 3),
    "unknown": ("secondary", 4),
}


def gen_table(app):

    df = pd.read_sql(
        "SELECT * FROM public.dn_app WHERE not(-1=any(array_replace(malwares, null, -1)));",
        db,
    )

    df.infected_pcap = df.infected_pcap.apply(lambda x: ",".join(map(str, x)))
    df.malwares = df.malwares.apply(lambda x: ",".join(map(str, x)))
    df.top10m = df.top10m.apply(lambda x: -1 if np.isnan(x) else x)
    df.insert(9, "rcode<>0/tot", (df.apps - df["rcode=0"]) / df.apps)

    df.manual = df.manual.fillna(-1).astype(int)

    data_table = dash_table.DataTable(
        id="datatable_app",
        columns=[{"name": i, "id": i} for i in df.columns],
        data=df.to_dict("records"),
        editable=True,
        filter_action="native",
        style_data_conditional=[
            {
                "if": {"filter_query": "{manual} = 1"},
                "backgroundColor": "lightCoral",
                "color": "white",
            },
            {
                "if": {
                    "filter_query": "{rcode<>0/tot} > 0.5",
                    "column_id": "rcode<>0/tot",
                },
                "backgroundColor": "red",
                "color": "white",
                "fontWeight": "bold",
            },
            {
                "if": {
                    "filter_query": "{rcode<>0/tot} < 0.5",
                    "column_id": "rcode<>0/tot",
                },
                "backgroundColor": "lightGreen",
                "color": "white",
                "fontWeight": "bold",
            },
        ],
    )

    # @app.callback(
    #     Output("ciao-div", "children"),
    #     Input("datatable_app", "derived_virtual_data"),
    #     Input("datatable_app", "selected_cells"),
    # )
    # def update_graphs(rows, selected_cells):
    #     if selected_cells is None:
    #         selected_cells = []

    #     print(selected_cells)
    #     return []

    return [data_table]


app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])


def gen_toolbar(app):
    buttons = []

    for name in manual_values:
        dbc_button = dbc.Button(
            name,
            color=manual_values[name][0],
            id="button-%s" % name,
            style={"font-family": "monospace", "font-size": "24px"},
        )
        print(dbc_button)
        buttons.append(dbc_button)

    return buttons


table = gen_table(app)
app.layout = html.Div(
    [html.Div(id="div-output-%s" % name) for name in manual_values]
    + [
        html.Div(gen_toolbar(app), id="div-toolbar"),
        html.Div(table, id="div-table"),
    ],
    style={"display": "flex", "flex-direction": "column"},
)

print(', '.join('n_clicks_%s' % name for name in manual_values))

def fun_submit(n_clicks_null, n_clicks_legit, n_clicks_malware, n_clicks_ad_related, n_clicks_undef, n_clicks_unknown, rows, selected_cells):  # , selected_cells):
    print(selected_cells)
    if selected_cells is not None:
        dn_ids = [s['row_id'] for s in selected_cells]
        for s in selected_cells:
            rows[s['row']]['manual'] = 1
            print(rows[s['row']]['id'] == s['row_id'])
    return rows

# for name in manual_values:
app.callback(
    #Output("div-output-%s" % name, "children"),
    Output('datatable_app', 'data'),
    # [Input("button-%s" % name, "n_clicks")],
    [
        Input("button-%s" % name, "n_clicks") for name in manual_values
    ],
    [
        State('datatable_app', 'data'),
        State("datatable_app", "selected_cells"),
    ],
)(fun_submit)

if __name__ == "__main__":
    app.run_server(debug=False, port=8051)
