import re

def cm_latex(df_cm):
    result = df_cm.to_latex(escape=False)\
        .replace("\n", "")\
        .replace(r"\toprule{}", "")\
        .replace(r"\midrule", "")\
        .replace(r"\bottomrule", "")\
        .replace(r"tabular}{lrr}", r"tabular}")\
        .replace(r"tabular", r"pmatrix")
    
    regex = r"[ ]+"
    subst = " "
    result = re.sub(regex, subst, result, 0, re.MULTILINE)
    
    regex = r"\s*&\s*NIp\s*&\s*Ip\s*\\\\\s*NIt\s*&\s*"
    subst = " "
    result = re.sub(regex, subst, result, 0, re.MULTILINE | re.VERBOSE)
    
    regex = r"\s*It\s*&\s*"
    subst = " "
    result = re.sub(regex, subst, result, 0, re.MULTILINE | re.VERBOSE)

    return f"$\small{result}$"

def fx_symbol(name):
    return {
            "llr": "\lambda",
            "nx": "nx",
            "ctr": "ctr",
            "ratio": "w"
    }[name]

def latex(key, args = None):
    return f"${_latex(key, args)}$"

def _latex(key, args = None):
    fx = {
            "llr": "\lambda",
            "nx": "nx",
            "ctr": "ctr"
    }
    if key in fx:
        return fx[key]

    nn = {
        ('normal', 'pr'):  '\\bar{pr}%s',
        ('normal', 're'):  '\\bar{re}%s',
        ('normal', 'tpr'): '\\bar{tpr}%s',
        ('normal', 'f1'):  '\\bar{f1}%s',

        ('infected', 'pr'):  'pr%s',
        ('infected', 're'):  're%s',
        ('infected', 'tpr'): 'tpr%s',
        ('infected', 'f1'):  'f1%s',

        ('macro', 'pr'):  'PR%s',
        ('macro', 're'):  'RE%s',
        ('macro', 'tpr'): 'TPR%s',
        ('macro', 'f1'):  'F1%s',


        ('', 'accuracy'): 'acc%s',

        ('', 'CM'): '\\tiny \\begin{pmatrix} tn & fn \\\\ fp & tp\\end{pmatrix}%s'#'cm%s'
    }
    if key in nn:
        return nn[key] % ('_' + args[0])

    if key == "size": return "%d" % args
    if key == "vDGA":
        dga_gt = args[0]
        vDGA = args[1]
        return "vDGA%s%d" % ("\ge" if dga_gt else "=", vDGA)
    if key == "th":
        return "%d" % args #"%0.1f%s_{%s}=%d" % args
    if key == "thp":
        return "%0.1f" % (args)
    if key == "fx":
        return "%s" % args

    
    if key == "max": return "\\bar{M}"
    if key == "min": return "\\bar{m}"
    if key == "mean": return "\\bar{\\mu}"
    
    raise f"Key {key} not handled"