from numpy.lib.function_base import extract
import psycopg2
import pandas as pd
from extractor_with_suffix import ExtractorWS
import re, sys
import tensorflow as tf

input_max_len = 60

vocabulary = ['', '-', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

def run(extractor, model, column_name):
    db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")
    cur = db.cursor()

    with db.cursor() as cur:
        cur.execute(
                "SELECT COLUMN_NAME FROM information_schema.columns\
                WHERE table_name='dn'")
        column_names = [row[0] for row in cur]

    with db.cursor() as cur:
        if column_name in column_names:
            cur.execute(f"ALTER TABLE public.dn DROP COLUMN {column_name};")
        cur.execute(f"ALTER TABLE public.dn ADD COLUMN {column_name} real;")
        db.commit()


    with db.cursor() as cur:
        cur.execute(f"UPDATE public.dn SET {column_name}=0.0 WHERE suffix = '-ukw';")

    cur = db.cursor()

    cur.execute(
        f"""SELECT id, dn, suffix
            FROM public.dn
            WHERE
                suffix is distinct from '-ukw-'
                AND {column_name} is null
            ORDER BY id;"""
    )

    paging_size = 500_000

    translator = extractor.translator()

    while True:
        dns = cur.fetchmany(paging_size)
        if not dns:
            dns = cur.fetchall()
            if not dns:
                print("Fetched all domain names.")
            break
        print("fetched %d rows" % len(dns))

        df = pd.DataFrame(dns, columns=[ 'id', 'dn', 'suffix' ])

        X = df[['dn', 'suffix']].apply(lambda r: [ vocabulary.index(c) for c in translator(r[0], r[1])[-input_max_len:]], axis=1)

        X = tf.keras.preprocessing.sequence.pad_sequences(
            X.values.tolist(), maxlen=input_max_len, padding='post', dtype="int32",
            truncating='pre', value=vocabulary.index('')
        )

        df['ll'] = df.dn.apply(len)

        df['Y'] = model.predict(X)

        with db.cursor() as update_cursor:
            update_cursor.executemany(f"""UPDATE public.dn SET {column_name}=%s WHERE id = %s::integer;""", df[['Y', 'id']].values.tolist())
            db.commit()

if __name__ == "__main__":

    if len(sys.argv) < 4:
        print('Too few arguments', sys.argv)
        exit(1)

    extractor  = ExtractorWS.all()[sys.argv[1].upper()]

    try:
        model = tf.keras.models.load_model(sys.argv[2])
    except IOError as error:
        print("Invalid model:", error)

    column_name = sys.argv[3]
    if not re.match(r'[\w\d_]+', column_name):
        print("Wrong column name;")

    run(extractor, model, column_name)
