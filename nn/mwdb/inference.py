import psycopg2
import pandas as pd
from extractor_with_suffix import ExtractorWS
import sys
import tensorflow as tf
from psycopg2.extras import execute_values
import numpy as np

max_len = 60

vocabulary = ['', '-', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

def run(model_row):
    
    model = tf.keras.models.load_model(model_row['path'])
    extractor = ExtractorWS.all()[model_row['extractor'].upper()]
    max_len = model_row['max_lenght_input']

    cur = db.cursor()

    cur.execute(
        f"""SELECT id, dn, suffix
            FROM public.dn
            WHERE
                suffix is distinct from '-ukw-'
            ORDER BY id;"""
    )

    paging_size = 500_000

    translator = extractor.translator()

    while True:
        dns = cur.fetchmany(paging_size)
        if not dns:
            dns = cur.fetchmany()
            if not dns:
                print("Fetched all domain names.")
            break
        print("fetched %d rows" % len(dns))

        df = pd.DataFrame(dns, columns=[ 'id', 'dn', 'suffix' ])

        X = df[['dn', 'suffix']].apply(lambda r: [ vocabulary.index(c) for c in translator(r[0], r[1])[-max_len:]], axis=1)

        X = tf.keras.preprocessing.sequence.pad_sequences(
            X.values.tolist(), maxlen=max_len, padding='post', dtype="int32",
            truncating='pre', value=vocabulary.index('')
        )

        df['ll'] = df.dn.apply(len)

        df['Y'] = model.predict(X)

        num = df['Y'].replace(
            [0, 1], [0.000_000_000_000_000_1, 1 - 0.000_000_000_000_000_1]
        )
        den = np.ones(len(num)) - num

        df['logit'] = np.log(num / den)

        df['nn_id'] = model_row['id']
       
        execute_values(
            cur,
            """INSERT INTO public.dn_nn(
                    dn_id, nn_id, value, logit)
                VALUES  %s;""",
            df[['id', 'nn_id', 'Y', 'logit']].values.tolist()
        )
        db.commit()

if __name__ == "__main__":
    if len(sys.argv) < 4:
        print('Too few arguments', sys.argv)
        exit(1)

    nn_name = sys.argv[1]
    try:
        with db.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
            cur.execute("SELECT * FROM nns WHERE name=%s", [ nn_name ])
            model_row = cur.fetchone()
    except IOError as error:
        print("Invalid model:", error)

    if nn_name in [ "nosfx", "domain" ]:
        cur = db.cursor()

        df = pd.read_sql(f"""SELECT id, dn, suffix, {nn_name} as nn, logit_{nn_name} as logit_nn, top10m
                FROM public.dn
                WHERE
                    suffix is distinct from '-ukw-'
                ORDER BY id;""", db)

        df['nn_id'] = 1

        execute_values(
            cur,
            """INSERT INTO public.dn_nn(
                    dn_id, nn_id, value, logit)
                VALUES  %s;""",
            df[['id', 'nn_id', 'nn', 'logit_nn']].values.tolist()
        )
        db.commit()

        pass
    else:
        run(model_row)
