from enum import Enum
from os import stat
import tldextract
import pandas as pd
import re



class ExtractorWS(Enum):
    ANY = 0
    NOSFX = 1
    DOMAIN_SFX = 2
    DOMAIN = 3

    RE_SEARCHER = re.compile(r'^([\-_a-z0-9]{1,64}\.)+([\-_a-z0-9]{1,64})$').search

    @staticmethod
    def any(dn, suffix):
        return dn.lower()

    @staticmethod
    def nosfx(dn, suffix):
        return dn.lower()[:-len(suffix.lower())-1]
    
    @staticmethod
    def domain(dn, suffix):
        dn = ExtractorWS.nosfx(dn, suffix)
        return dn[dn.rfind('.')+1:]

    @staticmethod
    def domain_sfx(dn, suffix):
        return ExtractorWS.domain(dn,suffix) + '.' + suffix

    def translator(self):
        return getattr(ExtractorWS, str(self.name).lower())

    @staticmethod
    def checker(dn, check_suffix = False):
        exd = ExtractorWS.EXTRACTOR.value(dn)
        print(check_suffix, '<%s>' % exd.suffix)
        if exd.suffix == '':
            if check_suffix:
                return False
            print("warning: no suffix for dn |%s|" % dn)
        return dn.find('.') >= 0

    @staticmethod
    def is_dn(dn):
        if len(dn) == 0: return False
        if dn.find('.') < 0: return False
        return bool(ExtractorWS.RE_SEARCHER.value(dn.lower()))

    @staticmethod
    def extract(dn, suffix):
        return ExtractorWS.EXTRACTOR.value(dn, suffix)

    @classmethod
    def all(cls):
        return {role: member for role, member in cls.__members__.items()}


if __name__ == "__main__":
    for t in ExtractorWS.all():
        print(f"{t}:")
        trs = ExtractorWS.all()[t].translator()
        for dn in [ ('google.co.uk', 'co.uk'), ('gmail.pish.google.co.uk', 'co.uk'), ('gmail.pish.google.com', 'com') ]:
            print("%50s\t%50s" % (dn[0], trs(dn[0], dn[1])))