from re import DEBUG
import psycopg2
import pandas as pd
from function_g import function_g
import utils
from sqlalchemy import create_engine
import numpy as np

eng = create_engine("postgresql://postgres:postgres@localhost/dns",)
db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")


# input:
#       df:         result of function f, having per row each windows, and for columns:
#                       - wlen:     number of messages
#                       - wvalue:   LLR value
#                       - wnum:     sequencial number of the window inside the parent pcap
#                       - pcap_id:  the parent pcap id
#                       - dga:      vDGA value inherited from the parent pcap
#       nth:        the number of the we want to calculate the cms
# output:
#       cms:        [ cm_th0, cm_th1, ..., cm_thn, ] where cm_thi = [ TN, FP, [ FN0, FN1, FN2, FN3 ], [ TP0, TP1, TP2, TP3 ] ]
def function_l(df_f, nth):
    cms = []

    ths = np.linspace(df_f.wvalue.min(), df_f.wvalue.max(), num=nth, dtype=np.float32)

    p = { dga: sum(df_f.dga == dga) for dga in [ 1, 2, 3 ] }
    p[0] = sum(df_f.dga > 0)
    n = sum(df_f.dga == 0)
    
    for th in ths:
        cms.append(function_g(df_f, th, n, p))
        pass

    return cms