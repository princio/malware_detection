import psycopg2
import psycopg2.extras


def get_db():
    return psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

def get_model(db, name):
    with db.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
        cur.execute("SELECT * FROM nns WHERE name=%s", [ name ])
        return cur.fetchone()

def get_fn(db, fn):
    with db.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
        cur.execute("""
        SELECT *
            FROM fns
            WHERE
            fn_type='llr'
            AND name=%s
            AND nn_id=%s
            AND top10m=%s
            AND pinf=%s
            AND ninf=%s
            AND windowing=%s""",
        [ fn["name"], fn["nn_id"], fn["top10m"], fn["pinf"], fn["ninf"], fn["windowing"] ])
        return cur.fetchone()

def get_dn_number(db):
    with db.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM dn WHERE suffix is distinct from '-ukw-'")
        return cur.fetchone()[0]

def count_applied_windows(db, fn_id, wsize):
    with db.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM applies WHERE fn_id=%s AND wsize=%s", (fn_id, wsize))
        return cur.fetchone()[0]
    
def count_windows(db):
    with db.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM windows")
        return cur.fetchone()[0]

def get_inferenced_number(db, model_id):
    with db.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM dn_nn WHERE nn_id = %s", ( model_id, ))
        return cur.fetchone()[0]

def max_top10m(db):
    with db.cursor() as cur:
        cur.execute("SELECT TOP10M FROM PUBLIC.DN WHERE TOP10M IS NOT NULL ORDER BY TOP10M DESC LIMIT 1")
        return cur.fetchone()[0]

def get_yn(message):
    print(message)
    input1 = input()
    while not input1 in [ "y", "n" ]:
        input1 = input()
    return input1


if __name__ == '__main__':
    print(get_model(get_db(), "ciao"))
    print(get_dn_number(get_db()))