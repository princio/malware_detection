import psycopg2
import psycopg2.extras


def get_db():
    return psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

def get_model(db, name):
    with db.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
        cur.execute("SELECT * FROM nns WHERE name=%s", [ name ])
        return cur.fetchone()

def get_apply(db, fn):
    with db.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
        cur.execute("""
            SELECT *
                FROM applies
                WHERE
                name=%s         AND
                wsize=%s        AND
                windowing=%s    AND
                fn_type=%s      AND
                (nn_id=%s  OR nn_id IS NULL)        AND
                (top10m=%s OR top10m IS NULL)       AND
                (pinf=%s   OR pinf IS NULL)         AND
                (ninf=%s   OR ninf IS NULL)""",
            [ fn["name"], fn["wsize"], fn['windowing'], fn["fn_type"], fn["nn_id"], fn["top10m"], fn["pinf"], fn["ninf"] ])
        return cur.fetchone()
    
def get_apply_byname(db, name):
    with db.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
        cur.execute(
            """SELECT * FROM applies WHERE name=%s""",
            [ name ]
        )
        return cur.fetchone()

def create_apply(db, apply):
    with db.cursor() as cur:
        cur.execute(
            "INSERT INTO applies (name, wsize, windowing, fn_type, nn_id, top10m, pinf, ninf) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING ID",
            [ apply['name'], apply['wsize'], apply['windowing'], apply['fn_type'], apply['nn_id'], apply['top10m'], apply['pinf'], apply['ninf'] ]
        )
        apply["id"] = cur.fetchone()[0]
    db.commit()
    return apply

def get_dn_number(db):
    with db.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM dn WHERE suffix is distinct from '-ukw-'")
        return cur.fetchone()[0]

def count_applied_windows(db, apply_id):
    with db.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM windows WHERE apply_id=%s", (apply_id, ))
        return cur.fetchone()[0]

def count_toapply_windows(db, wsize):
    with db.cursor() as cur:
        cur.execute(f"""
        SELECT count(t1.WCOUNT) AS WCOUNTTOT FROM
            (SELECT FLOOR(FN_REQ / {wsize}) AS WNUM, COUNT(*) as wcount
                FROM MESSAGES_MASTER
                GROUP BY PCAP_ID, WNUM) AS t1
        """)
        return cur.fetchone()[0]
    
def count_windows(db):
    with db.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM windows")
        return cur.fetchone()[0]

def get_inferenced_number(db, model_id):
    with db.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM dn_nn WHERE nn_id = %s", ( model_id, ))
        return cur.fetchone()[0]

def max_top10m(db):
    with db.cursor() as cur:
        cur.execute("SELECT TOP10M FROM PUBLIC.DN WHERE TOP10M IS NOT NULL ORDER BY TOP10M DESC LIMIT 1")
        return cur.fetchone()[0]

def get_yn(message):
    print(message)
    input1 = input()
    while not input1 in [ "y", "n" ]:
        input1 = input()
    return input1


if __name__ == '__main__':
    print(get_model(get_db(), "ciao"))
    print(get_dn_number(get_db()))