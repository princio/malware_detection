import math
from pathlib import Path

from matplotlib.pyplot import fill
from apply_2 import perform
import utils
import psycopg2
from sqlalchemy import create_engine
import pandas as pd
import numpy as np
import json


eng = create_engine("postgresql://postgres:postgres@localhost/dns",)
db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")



def cmss_to_df(cmss):
    df_cmss = pd.DataFrame()

    df_cmss[('N', 'tn')] = np.asarray([ cm[0] for cms in cmss for cm in cms ])
    df_cmss[('N', 'fp')] = np.asarray([ cm[1] for cms in cmss for cm in cms ])

    for dga in [ 0, 1, 2, 3 ]:
        df_cmss[( dga, 'fn' )] = np.asarray([ cm[2][dga] for cms in cmss for cm in cms ])
        df_cmss[( dga, 'tp' )] = np.asarray([ cm[3][dga] for cms in cmss for cm in cms ])

    df_cmss.columns = pd.MultiIndex.from_tuples(df_cmss.columns.to_list())

    return df_cmss



def cms_to_df(cms):
    df_cms = pd.DataFrame()

    df_cms[('N', 'tn')] = np.asarray([ cm[0] for cm in cms ])
    df_cms[('N', 'fp')] = np.asarray([ cm[1] for cm in cms ])

    for dga in [ 0, 1, 2, 3 ]:
        df_cms[( dga, 'fn' )] = np.asarray([ cm[2][dga] for cm in cms ])
        df_cms[( dga, 'tp' )] = np.asarray([ cm[3][dga] for cm in cms ])

    df_cms.columns = pd.MultiIndex.from_tuples(df_cms.columns.to_list())

    return df_cms

### CMS:
### [tn, fp, fn, tp ]
### fn,tp = [ all, 1, 2, 3 ]

dgas = [ 0, 1, 2, 3 ]

thrange = 100

df = pd.read_csv(f'thranges/thranges_{thrange}.csv', index_col=0, header=[0,1])

df[('thrange', 'cms')] = np.asarray(df[('thrange', 'cms')].apply(json.loads))

cmss = df[('thrange', 'cms')].to_numpy().tolist()

df.drop(columns=[('thrange', 'cms')], inplace=True)

th2ranges = [ 0.2, 0.5, 0.7, 0.8, 0.9 ]

aboves = []
for _, row in df.iterrows():

    df_cms = cms_to_df(cmss[_])

    ths = np.linspace(row[('wvalue', 'min')], row[('wvalue', 'max')], num=row[('wvalue', 'nth')])

    tmp_cm = df_cms.iloc[0]
    n = tmp_cm[('N', 'tn')] + tmp_cm[('N', 'fp')]
    p = {
        dga: tmp_cm[(dga, 'fn')] + tmp_cm[(dga, 'tp')]
        for dga in dgas
    }

    print(tmp_cm)

    print(df_cms[[('N', 'tn')] + [(dga, 'tp') for dga in dgas]].to_markdown())

    df_cms_relative = df_cms.copy()

    for column in df_cms.columns:
        if column[0] == 'N':
            df_cms_relative[column] = df_cms[column] / n
        else:
            df_cms_relative[column] = df_cms[column] / p[column[0]]

    df_cms_relative['th'] = ths
    df_cms_relative = df_cms_relative[[('N', 'tn')] + [(dga, 'tp') for dga in dgas]]

    print(df_cms_relative.to_markdown())
    
    d_both_above = {}
    for th2 in th2ranges:
        d_th2 = {
            'tn': df_cms_relative[('N', 'tn')] >= th2
        }
        for dga in dgas:
            d_th2[f'tp_{dga}'] = df_cms_relative[(dga, 'tp')] >= th2

        df_th2 = pd.DataFrame(d_th2)

        d_both_above = {}
        for dga in dgas:
            s = df_th2['tn'] & df_th2[f'tp_{dga}']
            s = s.cumsum()-s.cumsum().where(~s).ffill().fillna(0).astype(int)

            d_both_above[f'{dga}  {th2}'] = s.max() / s.shape[0]
        
        pass
    aboves.append(d_both_above)
    pass

print(pd.DataFrame(aboves))

pd.DataFrame(aboves).to_csv(f'thranges/above_{thrange}.csv')