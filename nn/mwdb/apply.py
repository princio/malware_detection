from re import DEBUG
from numpy.lib.arraysetops import unique
import psycopg2
from psycopg2.extras import execute_values
import pandas as pd
import numpy as np
import time
import pprint

pp = pprint.PrettyPrinter(indent=4)

db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

query = """
DROP TABLE IF EXISTS public.applies;

CREATE TABLE IF NOT EXISTS public.applies
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    
    window_id integer NOT NULL,

    fn_id integer NOT NULL,

    value real NOT NULL,

    CONSTRAINT applies_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE public.applies
    OWNER to postgres;
"""

with db.cursor() as cur:
    cur.execute(query)

db.commit()

BATCH_SIZE = 10_000_000

pd.options.display.float_format = '{:.2f}'.format

df_windows = pd.read_sql(
    'SELECT * FROM windows',
    db,
)

cur = db.cursor()
for pcap_id in df_windows.pcap_id.drop_duplicates().values:
    df_w_pcap = df_windows[df_windows.pcap_id == 43].copy()

    def psql_array_fns(df):
        cat = ('{' + df['first_fn'].astype(str) + ',' + df['last_fn'].astype(str) + '}').str.cat(sep=',')
        return f"{{{cat}}}"

    query = (
                """SELECT FUN_NX(%d, '{%s}')"""
                % (
                    43,
                    psql_array_fns(df_w_pcap)
                )
            )

    with db.cursor() as cur2:
        cur2.execute("""SELECT FUN_NX(%s, %s)""", (43, psql_array_fns(df_w_pcap)))
        df_w_pcap['nxs'] = cur2.fetchall()[0][0]

    df_w_pcap['fn'] = 0

    def cv(v):
        if type(v).__module__ == np.__name__:
            return v.item()
        if type(v).__name__ == "list":
            return [ vv.item() if type(vv).__module__ == np.__name__ else vv for vv in v ]
        return v

                
    execute_values(
        cur,
        """INSERT INTO public.applies(
                window_id, fn_id, value)
            VALUES  %s;""",
        cv(df_w_pcap[['id', 'fn', 'nxs']].values.tolist())
    )
    pass #end batch
db.commit()
