from re import DEBUG
from numpy.lib.arraysetops import unique
import psycopg2
from psycopg2.extras import execute_values
import pandas as pd
import math
import pprint
import argparse
import numpy as np
import utils

pp = pprint.PrettyPrinter(indent=4)

db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

def run(apply):

    wsize = apply['wsize']

    pd.options.display.float_format = '{:.2f}'.format

    pcaps = pd.read_sql(
        f"""SELECT * FROM PCAP ORDER BY qr """,
        db,
    )

    cur = db.cursor()
    for pcap_id in pcaps["id"].values.tolist():

        tmp_llr = f"""CASE
                WHEN LOGIT = 'Infinity'
                THEN {apply["pinf"]}
                ElSE (CASE WHEN LOGIT='-Infinity' THEN {apply["ninf"]} ELSE LOGIT END)
            END"""
        
        if not(apply['top10m'] is None):
            tmp_llr = f"""CASE
                WHEN TOP10M <= {apply["top10m"]}
                THEN 0
                ElSE ({tmp_llr})
            END"""

        tmp_where = ("WHERE IS_RESPONSE IS %s " % ("FALSE" if apply["windowing"] == "req" else "TRUE")) if apply["windowing"] != "both" else ""

        query = f"""
            SELECT
                COUNT(*) as wcount,
                SUM({tmp_llr}) AS wvalue,
                FLOOR(M.FN_REQ / {wsize}) AS wnum
            FROM MESSAGES_{pcap_id} AS M
                JOIN DN ON (M.DN_ID = DN.ID)
                JOIN DN_NN AS DI ON (M.DN_ID = DI.DN_ID AND NN_ID = 1)
            {tmp_where}
            GROUP BY wnum """

        df_windows = pd.read_sql(query, db)

        df_windows['pcap_id'] = pcap_id
        df_windows['apply_id'] = apply['id']

        execute_values(
            
            cur,
            """INSERT INTO public.windows(apply_id, pcap_id, wnum, wcount, wvalue)
                VALUES  %s;""",
            df_windows[['apply_id', 'pcap_id', 'wnum', 'wcount', 'wvalue']].values.tolist()
        )
        db.commit()
    pass #end batch



if __name__ == "__main__":

    max_top10m = utils.max_top10m(db)

    parser = argparse.ArgumentParser(description='Apply LLR window function.')
    parser.add_argument('--model', metavar="MODEL", type=str, required=True,
                        help='The model name.')
    parser.add_argument('--top10m', required=False,
                        type=int,
                        help=f'If a DN has a top10m rank lower than \'value\' then it will be zeroed. Between 0 and {max_top10m}')
    parser.add_argument('--wsize', required=False,
                        default=500,
                        type=int,
                        choices=[ 100, 500, 2500 ],
                        help=f'Windows size.')
    parser.add_argument('--windowing', required=False,
                        default="both",
                        choices=[ "both", "req", "res" ],
                        help=f'How windows are defined.')
    parser.add_argument('--positive-inf', required=False,
                        default=100,
                        type=int,
                        help=f'Replace value for positive infinite.')
    parser.add_argument('--negative-inf', required=False,
                        default=-100,
                        type=int,
                        help=f'Replace value for negative infinite.')
    parser.add_argument('--inf', required=False,
                        default=None,
                        type=int,
                        help=f'Replace absolute value for both infinite.')
    parser.add_argument('name', metavar="NAME", help='The name of this LLR window function.')
    args = parser.parse_args()

    if args.inf is not None:
        pinf = args.inf
        ninf = -args.inf
    else:
        pinf = args.positive_inf
        ninf = args.negative_inf

    model = utils.get_model(db, args.model)
    if model is None:
        print(f"Model [{args.model}] doesn't exists")
        exit(1)
    
    ###
    dn_number = utils.get_dn_number(db)
    inferenced_number = utils.get_inferenced_number(db, model['id'])
    if utils.get_dn_number(db) != utils.get_inferenced_number(db, model['id']):
        print(f"Mismatch between infereced and DN number: should be {dn_number} while it is {inferenced_number}")
        exit(1)
    ###

    apply = dict(name=args.name, fn_type='llr', nn_id=model["id"], top10m=args.top10m, windowing=args.windowing, pinf=pinf, ninf=ninf)

    ###
    apply_tmp = utils.get_fn(db, apply)
    
    if apply_tmp is None:
        yn = utils.get_yn("Function not exists, create it? [Y/n]")
        if yn == 'y':
            with db.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
                cur.execute(
                    "INSERT INTO applies (name, wsize, windowing, fn_type, nn_id, top10m, pinf, ninf) VALUES (%s, %s, %s, 'llr', %s, %s, %s, %s) RETURNING ID",
                    [ apply['name'], apply['wsize'], apply['windowing'], apply['fn_type'], apply['nn_id'], apply['top10m'], apply['pinf'], apply['ninf'] ]
                )
                apply["id"] = cur.fetchone()[0]
                db.commit()
        else:
            exit(0)
    else:
        apply = apply_tmp
    ###

    ###
    num_applied_windows = utils.count_applied_windows(db, apply['id'], args.wsize)
    if num_applied_windows > 0:
        yn = utils.get_yn(f"{num_applied_windows} already applied with '{apply['name']}' and wsize {args.wsize}, overwrite? [Y/n]")
        if yn == 'y':
            with db.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
                cur.execute("DELETE FROM applies WHERE apply_id=%s", [ apply[0] ])
            print("Deleted previous apply.")
    ###

    run(apply, args.wsize)
    
    pass
