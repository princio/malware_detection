import argparse
import psycopg2
import pandas as pd
from extractor_with_suffix import ExtractorWS
import sys
import tensorflow as tf
from psycopg2.extras import execute_values
import numpy as np

max_len = 60

vocabulary = ['', '-', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

db = psycopg2.connect("host=localhost dbname=dns user=postgres password=postgres")

def run(model):
    
    extractor = ExtractorWS.all()[model_row['extractor'].upper()]
    max_len = model_row['max_lenght_input']

    cur = db.cursor()

    cur.execute(
        f"""SELECT id, dn, suffix
            FROM public.dn
            WHERE
                suffix is distinct from '-ukw-'
            ORDER BY id;"""
    )

    paging_size = 500_000

    translator = extractor.translator()

    while True:
        dns = cur.fetchmany(paging_size)
        if not dns:
            dns = cur.fetchmany()
            if not dns:
                print("Fetched all domain names.")
            break
        print("fetched %d rows" % len(dns))

        df = pd.DataFrame(dns, columns=[ 'id', 'dn', 'suffix' ])

        X = df[['dn', 'suffix']].apply(lambda r: [ vocabulary.index(c) for c in translator(r[0], r[1])[-max_len:]], axis=1)

        X = tf.keras.preprocessing.sequence.pad_sequences(
            X.values.tolist(), maxlen=max_len, padding='post', dtype="int32",
            truncating='pre', value=vocabulary.index('')
        )

        df['ll'] = df.dn.apply(len)

        df['Y'] = model.predict(X)

        num = df['Y']
        den = np.ones(len(num)) - num

        logit = np.log(num / den)

        #logit = np.where(logit == np.inf, 50, logit)
        #logit = np.where(logit == -np.inf, -50, logit)

        print(np.sort(logit))
        
        df['logit'] = logit

        df['nn_id'] = model_row['id']
       
        execute_values(
            cur,
            """INSERT INTO public.dn_nn(
                    dn_id, nn_id, value, logit)
                VALUES  %s;""",
            df[['id', 'nn_id', 'Y', 'logit']].values.tolist()
        )
        break
        db.commit()

if __name__ == "__main__":
    
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('--model', metavar="MODEL", type=str, choices=[ 'NOSFX', 'DOMAIN', 'ANY', 'DOMAIN_SFX'], help='The model name.')
    parser.add_argument('input', help='The CSV file containing the \'dn\' column.')
    parser.add_argument('output', help='The CSV file containing the \'value\' column.')
    args = parser.parse_args()

    

    try:
        model = tf.keras.models.load_model(model_row['path'])
    except Exception as e:
        print(e)
        exit(1)

    run(model)
