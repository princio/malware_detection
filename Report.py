from datetime import datetime
from Dataset import Dataset
from Model import Model
import numpy as np
from Metrics import Metrics

class Report:
    def __init__(self):
        self.id = None
        self.model = None
        self.dataset = None
        self.datetime = datetime.now()
        self.confusion_matrix = None
        self.time_elapsed = None
        self.labels = None
        self.metrics = None

    @staticmethod
    def create(model: Model, dataset: Dataset):
        report = Report()

        report.id = None
        report.model = model
        report.dataset = dataset
        report.datetime = datetime.now()
        report.confusion_matrix, report.time_elapsed = model.test(dataset)
        report.labels = dataset.labels

        report.metrics = Metrics(report.labels, dataset.dga, report.confusion_matrix)
        report.metrics.calc()

        return report

    @staticmethod
    def fetch(connection, id):
        cursor = connection.cursor()
        cursor.execute("""SELECT id, model_id, dataset_id, datetime, time_elapsed, confusion_matrix, labels
	                        FROM public.reports WHERE id=%s;""", (id, ))
                            
        return Report.fill(cursor.fetchone())
        
    @staticmethod
    def fill(fetched):
        fetched = list(fetched)
        
        report = Report()
        report.id = fetched.pop(0)
        report.model = fetched.pop(0)
        report.dataset = fetched.pop(0)
        report.datetime = fetched.pop(0)
        report.time_elapsed = fetched.pop(0)
        report.confusion_matrix = fetched.pop(0)
        report.labels = fetched.pop(0)
        
        report.metrics.calc(report.labels, report.confusion_matrix)

        return report

    @staticmethod
    def exists(connection, model_id, dataset_id):
        cursor = connection.cursor()
        cursor.execute("""SELECT COUNT(*)
	                        FROM public.reports WHERE model_id=%s AND dataset_id=%s;""", (model_id, dataset_id,))
                            
        return cursor.fetchone()[0]

    def save(self, connection):
        cursor = connection.cursor()
        cursor.execute("""INSERT INTO public.reports
                        (model_id, dataset_id, datetime, time_elapsed, confusion_matrix, labels)
                        VALUES (%s, %s, %s, %s, %s, %s) RETURNING id;""",
                        (self.model.id, self.dataset.id, self.datetime, self.time_elapsed, self.confusion_matrix.ravel().tolist(), self.labels,))
        self.id = cursor.fetchone()[0]
        connection.commit()

    def __str__(self):
        return ("model: %s\ndataset: %s\n%s\n" % (self.model, self.dataset, self.confusion_matrix))