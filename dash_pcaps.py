
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output
from plotly.subplots import make_subplots
import sqlite3
import pandas as pd


db_path = '/media/princio/ssd512/stratosphere/db_3.sqlite3'
dirs = {
    'malware': '/media/princio/ssd512/stratosphere/pcap/csv/malware/',
    'normal': '/media/princio/ssd512/stratosphere/pcap/csv/normal/'
}

db = sqlite3.connect(db_path)
df = pd.read_sql('SELECT * from pcap', db)
db.close()
df = df.drop(columns=['id', 's_id', 's_win'])
df['id'] = df['name']
df.set_index('id', inplace=True, drop=False)


chosen_columns = ["tot", "uniques/tot", "qry/h", "response-ok", "no-such-name"]

df['response-ok'] = df['response-ok'].div(df['tot'])
df['no-such-name'] = df['no-such-name'].div(df['tot'])

app = dash.Dash(__name__)

app.layout = html.Div([
    dash_table.DataTable(
        id='datatable-row-ids',
        columns=[
            {'name': i, 'id': i, 'deletable': True} for i in df.columns if i != 'id'
        ],
        data=df.to_dict('records'),
        editable=True,
        filter_action="native",
        sort_action="native",
        sort_mode='multi',
        row_selectable='multi',
        row_deletable=True,
        selected_rows=[],
        page_action='none',
        style_table={'height': '300px', 'overflowY': 'auto'}
    ),
    html.Div(id='datatable-row-ids-container')
])


@app.callback(
    Output('datatable-row-ids', 'children'),
    Input('datatable-row-ids', 'derived_virtual_row_ids'),
    Input('datatable-row-ids', 'selected_row_ids'),
    Input('datatable-row-ids', 'active_cell'),
    Input('datatable-row-ids', 'selected_cells'))
def update_table(row_ids, selected_row_ids, active_cell, selected_cells):
    pass


@app.callback(
    Output('datatable-row-ids-container', 'children'),
    Input('datatable-row-ids', 'derived_virtual_row_ids'),
    Input('datatable-row-ids', 'selected_row_ids'),
    Input('datatable-row-ids', 'active_cell'),
    Input('datatable-row-ids', 'selected_cells'))
def update_graphs(row_ids, selected_row_ids, active_cell, selected_cells):
    # When the table is first rendered, `derived_virtual_data` and
    # `derived_virtual_selected_rows` will be `None`. This is due to an
    # idiosyncrasy in Dash (unsupplied properties are always None and Dash
    # calls the dependent callbacks when the component is first rendered).
    # So, if `rows` is `None`, then the component was just rendered
    # and its value will be the same as the component's dataframe.
    # Instead of setting `None` in here, you could also set
    # `derived_virtual_data=df.to_rows('dict')` when you initialize
    # the component.
    
    #######################   ROWS  #################################
    selected_id_set = set(selected_row_ids or [])

    if row_ids is None:
        dff = df
        # pandas Series works enough like a list for this to be OK
        row_ids = df['id']
    else:
        dff = df.loc[row_ids]

    active_row_id = active_cell['row_id'] if active_cell else None

    colors = []
    for id in row_ids:
        if dff.loc[id]['type'] == 'botnet':
            color = '#276678' if id == active_row_id else '#1687a7' if id in selected_id_set else '#d3e0ea'
        else:
            color = '#8f1537' if id == active_row_id else '#c7004c' if id in selected_id_set else '#ffaaaa'
        colors.append(color)
    
    graphs = []
    columns = [c for c in chosen_columns if c in dff]
    for i, column in enumerate(columns):
        last = (i+1) == len(columns)
        graph = dcc.Graph(
                id=column + '--row-ids',
                figure={
                    'data': [
                        {
                            'x': dff['name'],
                            'y': dff[column],
                            'type': 'bar',
                            'marker': {'color': colors},
                            'color': dff['type'],
                            'hovertext': dff['name']
                        }
                    ],
                    'layout': {
                        "xaxis": {"automargin": True, 'visible': False},
                        'yaxis': {
                            'automargin': True,
                            'title': {'text': column}
                        },
                        'height': 250,
                        'margin': {'t': 1, 'l': 10, 'r': 10, 'b': 0},
                        'hovermode': 'x'
                    },
                },
            )
        graphs.append(graph)    
    return graphs

if __name__ == '__main__':
    app.run_server(debug=False)
