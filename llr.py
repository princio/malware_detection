import csv, numpy as np, matplotlib.pyplot as plt, time
from math import log
from plot_llr import plot_llr
from plot_num import plot_num
from Pcap import Pcap
from Model import Model
from DomainLevel import DomainLevel
import os, itertools
import Paths

plt.set_loglevel("warning")

def plott():
    model = Paths.model_side
    botnet = Paths.botnets['5.1']
    frame_infection_number = botnet['frame_infection_number']

    out_csv = '%s_%s.out.csv' % (botnet['path'], model['name'])
    if os.path.exists(out_csv):
        with open(out_csv, 'r') as f:
            reader = csv.reader(f)
            data = [[row[0], row[1], row[2]] for row in reader]
            predictions = np.asarray([float(row[2]) for row in data])
    else:
        model = Model(model['path'], model['domain_level'])
        pcap = Pcap(botnet['path'])
        predictions, _, _ = model.predict_csv(csv_in_path=pcap.path, csv_out_path=out_csv)






    # predictions[predictions == 1] = 1 - 1E-12
    # predictions[predictions == 0] = 1E-12
    # llr = np.log(predictions/(1-predictions))






    deltas = [int(botnet['len']*0.026), int(botnet['len']*0.05)]
    x, good_binary, bad_binary, good_float, bad_float = plot_num(predictions, frame_infection_number, deltas=deltas)
    _fig, axs = plt.subplots(2, len(deltas))  # Create a figure and an axes.  
    for idx, delta in enumerate(deltas):
        axs[0, idx].plot(x[delta], good_binary[delta], label=f'good_binary')
        axs[0, idx].plot(x[delta], bad_binary[delta], label=f'bad_binary')
        axs[0, idx].set_title(f'binary prediction sum with delta={delta}')
        axs[0, idx].legend()

        axs[1, idx].plot(x[delta], good_float[delta], label=f'good_float')
        axs[1, idx].plot(x[delta], bad_float[delta], label=f'bad_float')
        axs[1, idx].set_title(f'float prediction with delta={delta}')
        axs[1, idx].legend()

        if frame_infection_number is not None:
            axs[0, idx].axvline(x=frame_infection_number, color='red')
            axs[1, idx].axvline(x=frame_infection_number, color='red')

    plt.show()
    pass

if __name__ == "__main__":
    import matplotlib.rcsetup as rcsetup
    plott()
    pass