import csv, os, numpy as np
from enum import Enum
from math import floor
from DomainLevel import DomainLevel, extractor
import re
import pandas as pd
from keras.preprocessing.sequence import pad_sequences

def is_right(x):
    distance = abs((0 if x['label'] == 'legit' else 1) - x['probability'])
    rightness = 1 if (x['label'] == 'legit' and x['probability'] < 0.5) or (x['label'] == 'dga' and x['probability'] > 0.5) else 0
    return rightness, distance

def normalcapture_wrongness(x):
    rightness = 1 if x > 0.5 else 0
    distance = 0 if x <= 0.5 else x-0.5
    return rightness, distance


class Input:
    def __init__(self, capture, dl):
        self.capture = capture
        self.dl = dl
        self.name = self.capture.name + '.' + self.dl.name
        self.X_str = None

        pass

    def generate(self, model):
        if self.X_str is None:
            self.X_str = self.capture.domain.apply(self.dl.translate).rename('input')
            dir = f'predictions/{self.capture.name}/dl_{self.dl.name}/'
            path = f'{dir}/{self.name}.csv'
            if not os.path.exists(path):
                os.makedirs(dir, exist_ok=True)
                pd.concat([self.capture.readable, self.X_str], axis=1).to_csv(path)
        return X

    @property
    def labeled(self):
        return self.capture.labeled

    @property
    def domains(self):
        return self.capture.domain

    @property
    def tlds(self):
        return self.capture.dls

    @property
    def df(self):
        return pd.concat([self.domains, pd.Series(self.X_str, name='input')], axis=1)


class Output:
    def __init__(self, input, model, prediction, time_elapsed = None):
        self.input = input
        self.model = model
        self.prediction = prediction
        self.time_elapsed = time_elapsed
        self.name = self.input.name + '.' + self.model.name
        pass

    @staticmethod
    def predict(input, model):
        dir = f'predictions/{input.capture.name}/dl_{input.dl.name}/'
        path = f'{dir}/{input.name}.{model.name}.csv'
        if os.path.exists(path):
            prediction = pd.read_csv(path)
        else:
            os.makedirs(dir, exist_ok=True)
            predictions, _ = model.predict(input.generate(model))
            prediction = pd.Series(predictions, name='prediction')
            prediction.to_csv(path)

        return Output(input, model, prediction)